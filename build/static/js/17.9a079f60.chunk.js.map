{"version":3,"sources":["components/headerLink.tsx","article/vue的key属性加还是不加.js"],"names":["Main","clickPosBtn","idName","dom","document","getElementById","window","scrollTo","top","offsetTop","left","behavior","_this2","this","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","className","props","headerLink","map","item","index","level","key","onClick","title","React","Component","Template","_this","Object","_Users_honghuidu_homework_dinosaur_blog_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","_Users_honghuidu_homework_dinosaur_blog_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","_Users_honghuidu_homework_dinosaur_blog_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","call","state","react__WEBPACK_IMPORTED_MODULE_5__","_components_headerLink__WEBPACK_IMPORTED_MODULE_7__","src","alt"],"mappings":"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","file":"static/js/17.9a079f60.chunk.js","sourcesContent":["import React from 'react'\nimport \"../style/components/headerLink.scss\"\nexport default class Main extends React.Component<any, any>{\n    componentDidMount() { }\n\n    clickPosBtn = (idName: string) => {\n        const dom: any = document.getElementById(idName);\n        window.scrollTo({\n            top: dom.offsetTop - 10,\n            left: 0,\n            behavior: 'smooth'\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"headerLink\">\n                <div className=\"content\">\n                    <div className=\"real-content\">\n                        <div className='tag'>Reading Assistance ·</div>\n                        {\n                            this.props.headerLink.map((item: any, index: number) => {\n                                return <span className={'a' + item.level} key={index} onClick={() => this.clickPosBtn(item.title)}>{item.title}</span>\n                            })\n                        }\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}","import React, { Fragment } from 'react'\nimport '../style/main.scss'\nimport HeaderLink from \"../components/headerLink\"\nexport default class Template extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            headerLink: []\n        }\n    }\n    componentWillMount(){\n    }\n    componentDidMount() {\n    }\n    render() {\n        return (\n            <Fragment>\n                <HeaderLink headerLink={this.state.headerLink}></HeaderLink>\n                <div className=\"article\">\n<div className=\"title-content\"><h1 className=\"title\">vue的key属性加还是不加？</h1></div>\n<p>做过vue开发的程序猿大大们一定经常遇到的问题就是忘加key！忘加key！忘加key！不过好在vscode后来的vue校验对不加key的代码做出了红色波浪线警示，但是感觉很是不舒服呀，所以这个key到底有什么用途呢？官方文档中解释到：</p>\n\n<blockquote>\n  <p>key 的特殊属性主要用在 Vue 的虚拟 DOM 算法，在新旧 nodes 对比时辨识 VNodes。如果不使用 key，Vue 会使用一种最大限度减少动态元素并且尽可能的尝试修复/再利用相同类型元素的算法。使用 key，它会基于 key 的变化重新排列元素顺序，并且会移除 key 不存在的元素。有相同父元素的子元素必须有独特的 key。重复的 key 会造成渲染错误。</p>\n</blockquote>\n\n<p>简单来讲，如果有了key，diff算法会直接拿key值来做对比，而没有key的话，只能用其他的办法，在性能上肯定会有更多的损耗。同时注意到最后一句话，有相同父元素的子元素必须有独特的key，所以说如果相同的父元素下，引用了两次相同的子组件，那么这两个组件同样也需要加key来作区分，否则可能会造成未知的错误（如果出现未知的错误，可以加key试试）。</p>\n\n<p>相信平时大家有一个偷懒的写法就是直接把index作为key值，但是结合key的实际用途发现，以index作为key的话，无法进行新旧比较，所以这个写法可以说是无效的，严格来讲最好使用元素的唯一id做为key值。具体我们可以看下图的例子：</p>\n\n<pre><code><span> </span>\n<span>key:0 name:LiMing     key:0 name:LiMing</span>\n<span>key:1 name:HanDan     key:1 name:YeXuan</span>\n<span>key:2 name:ZhangYi    key:2 name:HanDan</span>\n<span>                      key:3 name:ZhangYi</span>\n<span></span>\n</code></pre>\n\n<p>可以看到，我们从第二项插入了一个 dom 如果使用 index 做为 key 值时，除了第一项其余的需要全部重绘。</p>\n\n<p>延伸个有意思的问题，<strong>v-for循环体中的input如何实现双向绑定呢？</strong></p>\n\n<pre><code><span></span>\n<span>&lt;template&gt;</span>\n<span>  &lt;div id=\"app\"&gt;</span>\n<span>    &lt;div v-for=\"(item,index) of list\" :key=\"item\"&gt;</span>\n<span>        &lt;p&gt;{'{'}{'{'}item}}&lt;/p&gt;</span>\n<span>        &lt;input type=\"text\" v-model=\"item\"&gt; </span>\n<span>    &lt;/div&gt;</span>\n<span>  &lt;/div&gt;</span>\n<span>&lt;/template&gt;</span>\n<span>export default {'{'}</span>\n<span>  name: \"app\",</span>\n<span>  data() {'{'}</span>\n<span>    return {'{'}</span>\n<span>      list: [1,2,3],</span>\n<span>    };</span>\n<span>  }</span>\n<span>};</span>\n<span>&lt;/script&gt;</span>\n<span></span>\n</code></pre>\n\n<p>看上面代码，很简单吗！但是跑起来发现，报错了：</p>\n\n<p><img src=\"http://wx4.sinaimg.cn/mw690/a73bc6a1ly1ft5xvbdk92j214604275x.jpg\" alt=\"image\" title=\"\" /></p>\n\n<p>大致意思是不能把v-for的循环数据直接进行双向绑定，所以最好的办法就是把纯数组修改为对象数组格式，如下优化：</p>\n\n<pre><code><span></span>\n<span>&lt;template&gt;</span>\n<span>  &lt;div id=\"app\"&gt;</span>\n<span>    &lt;div v-for=\"(item,index) of list\" :key=\"item.id\"&gt;</span>\n<span>        &lt;p&gt;{'{'}{'{'}item.num}}&lt;/p&gt;</span>\n<span>        &lt;input type=\"text\" v-model=\"item.num\"&gt; </span>\n<span>    &lt;/div&gt;</span>\n<span>  &lt;/div&gt;</span>\n<span>&lt;/template&gt;</span>\n<span></span>\n<span>&lt;script&gt;</span>\n<span>export default {'{'}</span>\n<span>  name: \"app\",</span>\n<span>  data() {'{'}</span>\n<span>    return {'{'}</span>\n<span>      list: [{'{'} id: 1, num: 1 }, {'{'} id: 2, num: 2 }, {'{'} id: 3, num: 3 }]</span>\n<span>    };</span>\n<span>  },</span>\n<span>  methods: {'{'}</span>\n<span>    add: function() {'{'}</span>\n<span>      this.list.push(\"string\");</span>\n<span>    },</span>\n<span>    remove: function(index) {'{'}</span>\n<span>      this.list.splice(index, 1);</span>\n<span>    }</span>\n<span>  }</span>\n<span>};</span>\n<span>&lt;/script&gt;</span>\n<span></span>\n</code></pre>\n\n<p>设想上面一种情况，如果我们把key设为item.num是不是能行呢？答案是否定的，不妨试一下，产生的问题就是我们每修改一次input的值，input框就会失焦。这是因为我们把key设置为num，而我们每次改变num，都会造成key变化，而导致虚拟dom对比认为发生元素变化而产生重绘行为。</p>\n\n<p>不过基于这一点官网上还给了一个好玩的例子,如果我们想某个文本变化就执行transition动画，可以通过添加key值来实现：</p>\n\n<pre><code><span></span>\n<span>&lt;transition name=\"bomb\" mode=\"out-in\"&gt;</span>\n<span>    &lt;span :key=\"msg\"&gt;{'{'}{'{'}msg}}&lt;/span&gt;</span>\n<span>&lt;/transition&gt;</span>\n<span>&lt;input class=\"input\" type=\"text\" v-model=\"msg\"&gt;</span>\n<span></span>\n</code></pre>\n\n<p>效果如下，每当修改文本时候就会触发红色的渐变效果：<br></br><img src=\"http://wx1.sinaimg.cn/mw690/a73bc6a1ly1ft5xvcewk8g20gq08ch0q.gif\" alt=\"image\" title=\"\" /></p>\n\n<p><strong>小总结</strong>：<br></br>1. key在dom算法中作为辨识字段排列元素，加快更新的效率<br></br>2. 父元素下相同的子元素都需要加key以作区分，子组件同样适用<br></br>3. key值被修改会造成元素重绘，具有两面性，需要依据此特征采取合适的方案定key值<br></br>4. 说了这么多，那标题的疑问，加还是不加呢？</p>\n</div>\n            </Fragment>\n        )\n    }\n}"],"sourceRoot":""}