{"version":3,"sources":["components/headerLink.tsx","article/VUE开启-keep-alive时的一些坑坑坑.js"],"names":["Main","clickPosBtn","idName","dom","document","getElementById","window","scrollTo","top","offsetTop","left","behavior","_this2","this","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","className","props","headerLink","map","item","index","level","key","onClick","title","React","Component","Template","_this","Object","_Users_honghuidu_homework_dinosaur_blog_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","_Users_honghuidu_homework_dinosaur_blog_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","_Users_honghuidu_homework_dinosaur_blog_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","call","state","react__WEBPACK_IMPORTED_MODULE_5__","_components_headerLink__WEBPACK_IMPORTED_MODULE_7__","id"],"mappings":"kLAEqBA,qNAGjBC,YAAc,SAACC,GACX,IAAMC,EAAWC,SAASC,eAAeH,GACzCI,OAAOC,SAAS,CACZC,IAAKL,EAAIM,UAAY,GACrBC,KAAM,EACNC,SAAU,iIAIT,IAAAC,EAAAC,KACL,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAf,2BAEIJ,KAAKK,MAAMC,WAAWC,IAAI,SAACC,EAAWC,GAClC,OAAOR,EAAAC,EAAAC,cAAA,QAAMC,UAAW,IAAMI,EAAKE,MAAOC,IAAKF,EAAOG,QAAS,kBAAMb,EAAKX,YAAYoB,EAAKK,SAASL,EAAKK,mBApBvGC,IAAMC,wLCCnBC,cACjB,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAlB,KAAAgB,IACVC,EAAAC,OAAAE,EAAA,EAAAF,CAAAlB,KAAAkB,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAtB,QACKuB,MAAQ,CACTjB,WAAY,CAAC,CAACI,MAAQ,KAAKG,MAAQ,sCAAkB,CAACH,MAAQ,KAAKG,MAAQ,iCAAuB,CAACH,MAAQ,KAAKG,MAAQ,oCAHlHI,mKAWV,OACIhB,EAAAC,EAAAC,cAACqB,EAAA,SAAD,KACIvB,EAAAC,EAAAC,cAACsB,EAAA,EAAD,CAAYnB,WAAYN,KAAKuB,MAAMjB,aACnCL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAC/BH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBAAgBH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,SAAd,4DAC/BH,EAAAC,EAAAC,cAAA,8PAEAF,EAAAC,EAAAC,cAAA,MAAIuB,GAAG,sCAAP,sCAEAzB,EAAAC,EAAAC,cAAA,uFAEAF,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,YAAMF,EAAAC,EAAAC,cAAA,kBACXF,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAAA,qGACAF,EAAAC,EAAAC,cAAA,2GACAF,EAAAC,EAAAC,cAAA,4BACAF,EAAAC,EAAAC,cAAA,6EACAF,EAAAC,EAAAC,cAAA,6BACAF,EAAAC,EAAAC,cAAA,kDACAF,EAAAC,EAAAC,cAAA,aACAF,EAAAC,EAAAC,cAAA,uDACAF,EAAAC,EAAAC,cAAA,gBAAQ,KACRF,EAAAC,EAAAC,cAAA,0CACAF,EAAAC,EAAAC,cAAA,yCACAF,EAAAC,EAAAC,cAAA,oFACAF,EAAAC,EAAAC,cAAA,+BAAiB,IAAjB,mEACAF,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,eAGAF,EAAAC,EAAAC,cAAA,uHAA8BF,EAAAC,EAAAC,cAAA,WAA9B,+FAAwDF,EAAAC,EAAAC,cAAA,0CAAxD,wDAA8GF,EAAAC,EAAAC,cAAA,WAA9G,iIAEAF,EAAAC,EAAAC,cAAA,MAAIuB,GAAG,iCAAP,iCAEAzB,EAAAC,EAAAC,cAAA,yqBAEAF,EAAAC,EAAAC,cAAA,MAAIuB,GAAG,kCAAP,kCAEAzB,EAAAC,EAAAC,cAAA,8QAEAF,EAAAC,EAAAC,cAAA,8RAEAF,EAAAC,EAAAC,cAAA,o1BAtDsCW,IAAMC","file":"static/js/10.b1f5ab14.chunk.js","sourcesContent":["import React from 'react'\nimport \"../style/components/headerLink.scss\"\nexport default class Main extends React.Component<any, any>{\n    componentDidMount() { }\n\n    clickPosBtn = (idName: string) => {\n        const dom: any = document.getElementById(idName);\n        window.scrollTo({\n            top: dom.offsetTop - 10,\n            left: 0,\n            behavior: 'smooth'\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"headerLink\">\n                <div className=\"content\">\n                    <div className=\"real-content\">\n                        <div className='tag'>Reading Assistance ·</div>\n                        {\n                            this.props.headerLink.map((item: any, index: number) => {\n                                return <span className={'a' + item.level} key={index} onClick={() => this.clickPosBtn(item.title)}>{item.title}</span>\n                            })\n                        }\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}","import React, { Fragment } from 'react'\nimport '../style/main.scss'\nimport HeaderLink from \"../components/headerLink\"\nexport default class Template extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            headerLink: [{\"level\":\"h3\",\"title\":\"keep-alive简单介绍\"},{\"level\":\"h3\",\"title\":\"this.$route.query报错\"},{\"level\":\"h3\",\"title\":\"事件的处理\"}]\n        }\n    }\n    componentWillMount(){\n    }\n    componentDidMount() {\n    }\n    render() {\n        return (\n            <Fragment>\n                <HeaderLink headerLink={this.state.headerLink}></HeaderLink>\n                <div className=\"article\">\n<div className=\"title-content\"><h1 className=\"title\">刨下VUE中keep-alive的一些坑</h1></div>\n<p>在做大牛工资条的时候遇到一个需求是需要固定页面不进行渲染的，这时就用到了 keep-alive了。  </p>\n\n<h3 id='keep-alive简单介绍'>keep-alive简单介绍</h3>\n\n<p>如下在vue项目里面配置 keep-alive：</p>\n\n<pre><code><span>js</span>\n<span>//app.vue</span>\n<span>//只有 keepAlive 属性的路由才使用 keep-alive </span>\n<span>//如果全局都使用的话则去掉 v-if即可</span>\n<span>&lt;keep-alive&gt;</span>\n<span>     &lt;router-view v-if=\"$route.meta.keepAlive\"&gt;&lt;/router-view&gt;</span>\n<span>&lt;/keep-alive&gt;</span>\n<span>&lt;router-view v-else&gt;&lt;/router-view&gt;</span>\n<span></span>\n<span>//路由中的配置 </span>\n<span> {'{'}</span>\n<span>    path: '/salarydetail',</span>\n<span>    name: 'salaryDetail',</span>\n<span>    component: resolve =&gt; require(['@/page/salaryDetail'], resolve),</span>\n<span>    meta: {'{'} keepAlive: true }//添加meta，keepAlive属性</span>\n<span>  }</span>\n<span></span>\n</code></pre>\n\n<p>在 keep-alive的路由组件里面的声明周期排序：<br></br>1.页面第一次进入，钩子的触发顺序<b>created-> mounted-> activated</b>，退出时触发deactivated。<br></br>2.当再次进入（前进或者后退）时，只触发activated。</p>\n\n<h3 id='this.$route.query报错'>this.$route.query报错</h3>\n\n<p>在项目中遇到一个bug，获取路由的query值时有时会报错，这里发现问题是，使用了keep-alive后数据需要进入页面在activated中再次获取，才能达到更新的目的。所以在点击某个事件获取 this.$route.query时就不是最新的事件，所以需要设置一个变量在 activated 周期里面进行更新赋值。</p>\n\n<h3 id='事件的处理'>事件的处理</h3>\n\n<p>发生的问题是事件绑定了很多次，比如上传点击input监听change事件，突然显示了多张相同图片的问题。</p>\n\n<p>也就是说，DOM在编译后就缓存在内容中了，如果再次进入还再进行事件绑定初始化则就会发生这个问题。</p>\n\n<p>解决办法：在mounted中绑定事件，因为这个只执行一次，并且DOM已准备好。如果插件绑定后还要再执行一下事件的handler函数的话，那就提取出来，放在activated中执行。比如：根据输入内容自动增长textarea的高度，这部分需要监听textarea的input和change事件，并且页面进入后还要再次执行一次handler函数，更新textarea高度（避免上次输入的影响）。</p>\n</div>\n            </Fragment>\n        )\n    }\n}"],"sourceRoot":""}