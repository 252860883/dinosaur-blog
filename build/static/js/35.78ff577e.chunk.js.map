{"version":3,"sources":["components/headerLink.tsx","article/小程序实现图片懒加载的三种方式.js"],"names":["Main","clickPosBtn","idName","dom","document","getElementById","window","scrollTo","top","offsetTop","left","behavior","_this2","this","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","className","props","headerLink","map","item","index","level","key","onClick","title","React","Component","Template","_this","Object","_Users_honghuidu_homework_dinosaur_blog_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","_Users_honghuidu_homework_dinosaur_blog_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","_Users_honghuidu_homework_dinosaur_blog_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","call","state","react__WEBPACK_IMPORTED_MODULE_5__","_components_headerLink__WEBPACK_IMPORTED_MODULE_7__","id"],"mappings":"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","file":"static/js/35.78ff577e.chunk.js","sourcesContent":["import React from 'react'\nimport \"../style/components/headerLink.scss\"\nexport default class Main extends React.Component<any, any>{\n    componentDidMount() { }\n\n    clickPosBtn = (idName: string) => {\n        const dom: any = document.getElementById(idName);\n        window.scrollTo({\n            top: dom.offsetTop - 10,\n            left: 0,\n            behavior: 'smooth'\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"headerLink\">\n                <div className=\"content\">\n                    <div className=\"real-content\">\n                        <div className='tag'>Reading Assistance ·</div>\n                        {\n                            this.props.headerLink.map((item: any, index: number) => {\n                                return <span className={'a' + item.level} key={index} onClick={() => this.clickPosBtn(item.title)}>{item.title}</span>\n                            })\n                        }\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}","import React, { Fragment } from 'react'\nimport '../style/main.scss'\nimport HeaderLink from \"../components/headerLink\"\nexport default class Template extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            headerLink: [{\"level\":\"h3\",\"title\":\"传统懒加载方案\"},{\"level\":\"h3\",\"title\":\"方案一：image组件的lazy-load属性\"},{\"level\":\"h3\",\"title\":\"方案二：利用WXML节点信息API实现\"},{\"level\":\"h3\",\"title\":\"方案三：利用WXML节点布局相交状态实现\"}]\n        }\n    }\n    componentWillMount(){\n    }\n    componentDidMount() {\n    }\n    render() {\n        return (\n            <Fragment>\n                <HeaderLink headerLink={this.state.headerLink}></HeaderLink>\n                <div className=\"article\">\n<div className=\"title-content\"><h1 className=\"title\">小程序实现图片懒加载的三种方式</h1></div>\n<blockquote>\n  <p>懒加载，emm大概是每个前端工程师在面试时被问到如何进行前端优化的第一个想到的方法吧哈哈。比如我们的图片瀑布流布局等等，一次性加载这么多的图片资源那速度肯定是相当的“辣眼睛”呀～，所以图片懒加载在前端优化中可以发挥到很大的作用，所以这一篇就来聊聊小程序该如何实现图片懒加载～</p>\n</blockquote>\n\n<h3 id='传统懒加载方案'>传统懒加载方案</h3>\n\n<p>熟悉H5开发的话可能已经很熟悉该如何进行图片懒加载，简单来说，其原理就是当图片DOM进入到窗口可视区的时候设置真实的图片路径。通过节流函数设置一定时间滑动内执行判断函数即可。主要思路如下：</p>\n\n<pre><code><span></span>\n<span>//获取图片当前位置距离顶部的距离</span>\n<span>let top=document.getElementById('xxx').getBondingClientRect().top; </span>\n<span>//如果top小于窗口高度，将图片链接插入到img中，加载</span>\n<span>if(top&lt;window.innerheight){'{'}</span>\n<span>   document.getElementById('xxx').getBondingClientRect().src=xxx</span>\n<span>}</span>\n<span></span>\n</code></pre>\n\n<p>但是，尴尬的事情发生了，小程序渲染层和逻辑层是分开的，一个在 webview 一个是 JSCore，没有 BOM、DOM 既不能设置节点，也获取不到窗口对象，这可咋整？<br></br>嘿，别着急，往下看。</p>\n\n<h3 id='方案一：image组件的lazy-load属性'>方案一：image组件的lazy-load属性</h3>\n\n<p>小程序在设计的时候就想到了图片懒加载，所以在官方文档中也给出了 <code>lazy-load</code> 属性，加上之后就可以实现懒加载啦！是不是很方便！</p>\n\n<pre><code><span></span>\n<span>&lt;scroll-view scroll-y=\"true\" class='lazyload'&gt;</span>\n<span>  &lt;image lazy-load=\"true\" src=\"{'{'}{'{'}item.url}}\" wx:for=\"{'{'}{'{'}imgUrls}}\" wx:key=\"{'{'}{'{'}index}}\"&gt;&lt;/image&gt;</span>\n<span>&lt;/scroll-view&gt; </span>\n<span></span>\n</code></pre>\n\n<p>优点：<br></br>-方便，简单<br></br>缺点：<br></br>-只针对page与scroll-view下的image有效，同时版本限制在 <code>1.5.0</code> 以上<br></br>-懒加载无回调函数，图片加载后不能进行其他操作<br></br>-加载之前不能设置默认显示图片</p>\n\n<h3 id='方案二：利用WXML节点信息API实现'>方案二：利用WXML节点信息API实现</h3>\n\n<p>第二个办法呢就是通过小程序获取节点信息的api <code>createSelectorQuery</code> 来完成。<br></br>首先，通过 <code>wx.getSystemInfo</code> 获取可视区的高度，并写入 data。</p>\n\n<pre><code><span></span>\n<span>secondMethod: function() {'{'}</span>\n<span>    let that = this;</span>\n<span>    if (this.data.screenHeight) {'{'}</span>\n<span>      this.judgeShow()</span>\n<span>    } else {'{'}</span>\n<span>      wx.getSystemInfo({'{'}</span>\n<span>        success: function(res) {'{'}</span>\n<span>          console.log('屏幕高度：' + res.screenHeight)</span>\n<span>          that.setData({'{'}</span>\n<span>            screenHeight: res.screenHeight</span>\n<span>          })</span>\n<span>          that.judgeShow()</span>\n<span>        }</span>\n<span>      })</span>\n<span>    }</span>\n<span>}</span>\n<span></span>\n</code></pre>\n\n<p>然后获取到 screenHeight 后，执行懒加载的核心代码。</p>\n\n<pre><code><span></span>\n<span>judgeShow: function() {'{'}</span>\n<span>    let that = this</span>\n<span>    wx.createSelectorQuery().selectAll('.item').boundingClientRect(function(rects) {'{'}</span>\n<span>      rects.forEach(function(rect, index) {'{'}</span>\n<span>        // 如果当前的元素距离顶部的高度小于可视区域的高度，则设置为显示</span>\n<span>        if (rect.top &lt;= that.data.screenHeight) {'{'}</span>\n<span>          that.setData({'{'}</span>\n<span>            [`imgUrls[${'{'}index}].show`]: true,</span>\n<span>          })</span>\n<span>        }</span>\n<span>      })</span>\n<span>    }).exec()</span>\n<span>},</span>\n<span></span>\n</code></pre>\n\n<p>小程序有默认的滑动监听事件 <code>onPageScroll</code></p>\n\n<pre><code><span></span>\n<span>onPageScroll: function() {'{'}</span>\n<span>    this.secondMethod()</span>\n<span>}</span>\n<span></span>\n</code></pre>\n\n<p>但是，由于滑动监听是一个高频操作，会导致持续的执行懒加载函数，这里我们采用 <strong>throttle函数</strong> 进行优化。</p>\n\n<pre><code><span></span>\n<span>onReady: function() {'{'}</span>\n<span>    this.runThrottle = this.throttle()</span>\n<span>},</span>\n<span>throttle: function() {'{'}</span>\n<span>    console.log('throttle')</span>\n<span>    let that = this;</span>\n<span>    var starTime = 0</span>\n<span>    return function() {'{'}</span>\n<span>      var nowTime = new Date().getTime()</span>\n<span>      if (nowTime - starTime &gt; 100) {'{'}</span>\n<span>        that.secondMethod()</span>\n<span>        starTime = nowTime</span>\n<span>      }</span>\n<span>    }</span>\n<span>},</span>\n<span>onPageScroll: function() {'{'}</span>\n<span>    this.runThrottle()</span>\n<span>},</span>\n<span></span>\n</code></pre>\n\n<p>优点：<br></br>-无版本限制<br></br>-图片载入时可以自定义回调，配置一些自定义的操作<br></br>缺点：<br></br>-代码比较多，流程比较复杂</p>\n\n<h3 id='方案三：利用WXML节点布局相交状态实现'>方案三：利用WXML节点布局相交状态实现</h3>\n\n<p>小程序开放了一组WXML节点布局相交状态实现的api，可以用于推断某些节点是否可以被用户看见、有多大比例可以被用户看见。示例如下,当目标元素在页面显示区域内相交或相离，且相交或相离程度达到目标节点布局区域的20%和50%时触发回调函数：</p>\n\n<pre><code><span></span>\n<span>Page({'{'}</span>\n<span>  onLoad: function(){'{'}</span>\n<span>    wx.createIntersectionObserver(this, {'{'}</span>\n<span>      thresholds: [0.2, 0.5]</span>\n<span>    }).relativeToViewport().observe('.target-class', (res) =&gt; {'{'}</span>\n<span>      res.id // 目标节点 id</span>\n<span>      res.dataset // 目标节点 dataset</span>\n<span>      res.intersectionRatio // 相交区域占目标节点的布局区域的比例</span>\n<span>      res.intersectionRect // 相交区域</span>\n<span>      res.intersectionRect.left // 相交区域的左边界坐标</span>\n<span>      res.intersectionRect.top // 相交区域的上边界坐标</span>\n<span>      res.intersectionRect.width // 相交区域的宽度</span>\n<span>      res.intersectionRect.height // 相交区域的高度</span>\n<span>    })</span>\n<span>  }</span>\n<span>})</span>\n<span></span>\n<span></span>\n</code></pre>\n\n<p>利用这个特性我们就可以很轻松的实现图片懒加载了：</p>\n\n<pre><code><span></span>\n<span>// WXML 文件</span>\n<span>&lt;view class='lazyload'&gt;</span>\n<span>  &lt;view class='left'&gt;</span>\n<span>    &lt;image class='img{'{'}{'{'}index}}' src=\"{'{'}{'{'}item.show?item.url: '' }}\" wx:for=\"{'{'}{'{'}imgUrls}}\" wx:key=\"{'{'}{'{'}index}}\" wx:if=\"{'{'}{'{'}index%2}}\" &gt;&lt;/image&gt;</span>\n<span>  &lt;/view&gt;</span>\n<span>  &lt;view class='right'&gt;</span>\n<span>    &lt;image class='img{'{'}{'{'}index}}' src=\"{'{'}{'{'}item.show?item.url: '' }}\" wx:for=\"{'{'}{'{'}imgUrls}}\" wx:key=\"{'{'}{'{'}index}}\" wx:if=\"{'{'}{'{'}!(index%2)}}\"&gt;&lt;/image&gt;</span>\n<span>  &lt;/view&gt;</span>\n<span>&lt;/view&gt;</span>\n<span></span>\n<span>// JS 文件</span>\n<span>judge: function() {'{'}</span>\n<span>    for (let index in this.data.imgUrls) {'{'}</span>\n<span>        wx.createIntersectionObserver().relativeToViewport().observe(`.img${'{'}index}`, (res) =&gt; {'{'}</span>\n<span>        console.log(res)</span>\n<span>        if (res.intersectionRatio){'{'}</span>\n<span>            //如果图片进入可视区，将其设置为 show</span>\n<span>            this.setData({'{'}</span>\n<span>            [`imgUrls[${'{'}index}].show`]: true,</span>\n<span>            })</span>\n<span>        }</span>\n<span>        })</span>\n<span>    }</span>\n<span>}</span>\n<span></span>\n</code></pre>\n\n<p>优点：<br></br>-方便配置，几行代码即可<br></br>-无版本限制<br></br>-图片载入时可以自定义回调，配置一些自定义的操作</p>\n</div>\n            </Fragment>\n        )\n    }\n}"],"sourceRoot":""}