{"version":3,"sources":["components/headerLink.tsx","article/JavaScript运行机制-EventLoop.js"],"names":["Main","clickPosBtn","idName","dom","document","getElementById","window","scrollTo","top","offsetTop","left","behavior","_this2","this","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","className","props","headerLink","map","item","index","level","key","onClick","title","React","Component","Template","_this","Object","_Users_honghuidu_homework_dinosaur_blog_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","_Users_honghuidu_homework_dinosaur_blog_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","_Users_honghuidu_homework_dinosaur_blog_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","call","state","react__WEBPACK_IMPORTED_MODULE_5__","_components_headerLink__WEBPACK_IMPORTED_MODULE_7__","id","src","alt","target","href"],"mappings":"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","file":"static/js/5.f69d0eb2.chunk.js","sourcesContent":["import React from 'react'\nimport \"../style/components/headerLink.scss\"\nexport default class Main extends React.Component<any, any>{\n    componentDidMount() { }\n\n    clickPosBtn = (idName: string) => {\n        const dom: any = document.getElementById(idName);\n        window.scrollTo({\n            top: dom.offsetTop - 10,\n            left: 0,\n            behavior: 'smooth'\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"headerLink\">\n                <div className=\"content\">\n                    <div className=\"real-content\">\n                        <div className='tag'>Reading Assistance ·</div>\n                        {\n                            this.props.headerLink.map((item: any, index: number) => {\n                                return <span className={'a' + item.level} key={index} onClick={() => this.clickPosBtn(item.title)}>{item.title}</span>\n                            })\n                        }\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}","import React, { Fragment } from 'react'\nimport '../style/main.scss'\nimport HeaderLink from \"../components/headerLink\"\nexport default class Template extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            headerLink: [{\"level\":\"h3\",\"title\":\"单线程\"},{\"level\":\"h3\",\"title\":\"执行栈\"},{\"level\":\"h3\",\"title\":\"任务队列\"},{\"level\":\"h3\",\"title\":\"Event Loop\"},{\"level\":\"h3\",\"title\":\"Nodejs环境的 Event Loop\"},{\"level\":\"h4\",\"title\":\"事件循环六个阶段\"},{\"level\":\"h4\",\"title\":\"process.nextTick 与 setImmediate\"}]\n        }\n    }\n    componentWillMount(){\n    }\n    componentDidMount() {\n    }\n    render() {\n        return (\n            <Fragment>\n                <HeaderLink headerLink={this.state.headerLink}></HeaderLink>\n                <div className=\"article\">\n<div className=\"title-content\"><h1 className=\"title\">JavaScript运行机制之EventLoop</h1></div>\n<h3 id='单线程'>单线程</h3>\n\n<p>相信了解 JavaScript 语言的人都知道，由于 JavaScript 脚本语言的特殊性，决定了它需要单线程运行。后来H5规范推出了 Web Worker 允许 JavaScript 可以创建多个线程，但是子线程仍然是完全受主线程的控制，所以本质上还是单线程的。</p>\n\n<p>既然是单线程的，那我就有疑问了，我们平时经常进行 Ajax请求 、 setTimeout 等异步操作，浏览器会一直等待事件结束才执行下一个吗？如果一个请求的时间非常长，那这肯定是不行的。所以我们下面就来引入 任务队列 和 执行栈 的概念。</p>\n\n<h3 id='执行栈'>执行栈</h3>\n\n<p>首先来讲下JS执行栈，既然是栈嘛，那肯定采用的是后进先出的规则,主要用于存储在代码执行期间创建的所有执行上下文。<br></br>当 JavaScript 引擎首次读取脚本时，会创建一个全局执行上下文并将其推入当前的执行栈。每当发生一个函数调用，引擎都会为该函数创建一个新的执行上下文并将其推到当前执行栈的顶端。引擎会运行执行上下文在执行栈顶端的函数，当此函数运行完成后，其对应的执行上下文将会从执行栈中弹出，上下文控制权将移到当前执行栈的下一个执行上下文。我们来举个例子：</p>\n\n<pre><code><span></span>\n<span>var a= 1;</span>\n<span>function father(){'{'}</span>\n<span>    console.log('enter father function');</span>\n<span>    child();</span>\n<span>    console.log('father function is over')</span>\n<span>}</span>\n<span>function child(){'{'}</span>\n<span>    console.log('enter child function');</span>\n<span>}</span>\n<span>father();</span>\n<span></span>\n</code></pre>\n\n<p>上述函数的执行栈操作顺序如下图所示：<br></br><img src=\"http://wx3.sinaimg.cn/large/a73bc6a1ly1g0nh0euy5zj219s0ce75m.jpg\" alt=\"image\" title=\"\" /></p>\n\n<p>理解了执行栈，我们可以知道我们脚本中的代码都会被依次执行，可是这依然没有解决我们一开始的疑惑，异步代码该怎么办呢？</p>\n\n<h3 id='任务队列'>任务队列</h3>\n\n<p>前面已经知道了，同步任务会被依次放到执行栈执行。那异步任务执行得到的结果回调函数会被放到任务队列中。当我们的执行栈中的所有同步任务执行完毕，引擎就会读取任务队列的事件，放入执行栈进行执行。任务队列是一个先进先出的数据结构，排在前面的事件会被优先处理。当然涉及到定时器任务时，只会在规定时间之后被执行。</p>\n\n<p>除了异步任务，一些用户产生的事件比如 click 、 scroll 等只要涉及到了回调函数，都会统一放进任务队列等待主线程处理。而任务队列也分为两种，宏任务队列与微任务队列。不同的任务会被分配进入不同的队列。<br></br><strong>- 宏任务 与 微任务</strong><br></br>**macrotask(宏任务)<strong>：包括<code>整体代码script</code>，<code>setTimeout</code>，<code>setInterval</code>，<code>setImmediate</code>,<code>I/O</code>,<code>requestAnimationFrame</code>。<br></br>**microtask（微任务）</strong>，每个宏任务中都可以执行微任务，当宏任务执行完成会去执行包含的所有微任务，微任务执行完毕后这一轮事件循环才算结束。<strong>但是当 microtask 执行完之前是不会执行下一个宏任务的</strong>。 常见的 microtask 有：<code>Process.nextTick（Node独有）</code>、<code>Promise</code>、<code>Object.observe(废弃)</code>、<code>MutationObserver</code>。同时由于 <code>async\\await</code>本质上是基于 promise 的一些封装，所以也属于微任务。</p>\n\n<p>所以简单来记,执行的过程一般是：一个宏任务，所有微任务，一个宏任务，所有微任务...</p>\n\n<p>知道了微任务与宏任务，来做一个非常经典的面试题：</p>\n\n<pre><code><span></span>\n<span>setTimeout(function() {'{'}</span>\n<span>    console.log(1);</span>\n<span>})</span>\n<span></span>\n<span>new Promise(function(resolve) {'{'}</span>\n<span>    console.log(2);</span>\n<span>}).then(function() {'{'}</span>\n<span>    console.log(3);</span>\n<span>})</span>\n<span></span>\n<span>console.log(4);</span>\n<span></span>\n</code></pre>\n\n<p>我们来梳理一下：<br></br>1.首先整段代码作为一个宏任务，放进执行栈执行<br></br>2.setTimout，将其回调函数放入宏任务队列<br></br>3.执行 new Promise() ,输出 2, then函数分发到微任务队列<br></br>4.执行 console.log(4),输出 4<br></br>5.第一轮的宏任务结束，开始查询微任务队列，then函数在，执行，输出 3 <br></br>6.第一轮事件循环结束，开始第二轮<br></br>7.宏任务队列查询，setTimeout在，执行，输出1</p>\n\n<p>所以答案就是：<code>2 4 3 1</code></p>\n\n<h3 id='Event Loop'>Event Loop</h3>\n\n<p>通过上面，我们已经对执行栈、宏任务、微任务队列有所了解，那事件循环是什么呢？每次宏任务结束（包含微任务结束）之后，系统会检查是否有要执行的宏任务，这个检查的过程是持续的，每完成一个任务都会进行一次检查，这样的操作被称为<strong>事件循环</strong>。<br></br>最后来张图表示下吧：<br></br><img src=\"http://wx2.sinaimg.cn/mw690/a73bc6a1ly1g1wqhooik6j20h90cfaak.jpg\" alt=\"image\" title=\"\" /></p>\n\n<h3 id='Nodejs环境的 Event Loop'>Nodejs环境的 Event Loop</h3>\n\n<h4 id='事件循环六个阶段'>事件循环六个阶段</h4>\n\n<p>在node中事件每一轮循环按照顺序分为6个阶段：</p>\n\n<ol>\n<li>timers：执行满足条件的setTimeout、setInterval回调。</li>\n<li>I/O callbacks：是否有已完成的I/O操作的回调函数，来自上一轮的poll残留。</li>\n<li>idle，prepare：仅系统内部使用。</li>\n<li>poll：等待还没完成的I/O事件，会因timers和超时时间等结束等待。</li>\n<li>check：执行setImmediate的回调。</li>\n<li>close callbacks：关闭所有的closing handles，例如socket.on('close'[,fn])、http.server.on('close, fn)等。</li>\n</ol>\n\n<p>与浏览器不同的是，nodejs环境下每个阶段结束后都会执行完所有的微任务。</p>\n\n<h4 id='process.nextTick 与 setImmediate'>process.nextTick 与 setImmediate</h4>\n\n<p>与浏览器相比，Nodejs 拥有两个特殊的异步操作API <code>process.nextTick</code> 与 <code>setImmediate</code>。</p>\n\n<p><code>process.nextTick</code> ,Nodejs执行完所有同步任务，接下来就会执行process.nextTick的任务队列，它会优先于其他微任务执行，如果希望异步的任务尽快执行完毕，那就可以使用它，但是我们也不能过度使用，如果使用不当可能会造成I/O饥饿。</p>\n\n<pre><code><span></span>\n<span> Promise.resolve().then(() =&gt; console.log(4)); </span>\n<span> process.nextTick(() =&gt; console.log(3)); </span>\n<span> //output: 3 4</span>\n<span></span>\n</code></pre>\n\n<p><code>setImmediate</code> 的回调函数是被放在check阶段执行，即相当于事件循环的最后阶段，它的执行顺序会比 <code>setTimeout</code> 晚。</p>\n\n<pre><code><span></span>\n<span>setImmediate(()=&gt;{'{'}console.log(4)});</span>\n<span>setTimeout(()=&gt;{'{'}console.log(3)})</span>\n<span>//output: 3 4 </span>\n<span></span>\n</code></pre>\n\n<p>但是需要注意，如果在timers阶段执行时创建了setImmediate则会在此轮循环的check阶段执行，如果在timers阶段创建了setTimeout，由于timers已取出完毕，则会进入下轮循环，check阶段创建timers任务同理。</p>\n\n<pre><code><span></span>\n<span>setTimeout(()=&gt;{'{'}</span>\n<span>    setImmediate(() =&gt; {'{'} console.log(1) });</span>\n<span>    setTimeout(() =&gt; {'{'} console.log(2) });</span>\n<span>})</span>\n<span>//output: 1 2 </span>\n<span></span>\n<span>setImmediate(()=&gt;{'{'}</span>\n<span>    setImmediate(() =&gt; {'{'} console.log(1) });</span>\n<span>    setTimeout(() =&gt; {'{'} console.log(2) });</span>\n<span>})</span>\n<span>//output: 1 2 </span>\n<span></span>\n</code></pre>\n\n<p>我们讨论的也只是在理想情况下，<code>setTimeout(fn,0)</code>真正延迟不可能完全为0秒，所以有可能出现先创建的setTimeout(fn,0)而比setImmediate的回调后执行的情况。</p>\n\n<blockquote>\n  <p>参考:<br></br><a target=\"_blank\" href=\"https://juejin.im/post/59e85eebf265da430d571f89#comment\">这一次，彻底弄懂 JavaScript 执行机制</a><br></br><a target=\"_blank\" href=\"https://www.oecom.cn/understand-js-run-stack-and-world/\">如何理解js的执行上下文与执行栈</a><br></br><a target=\"_blank\" href=\"https://www.imooc.com/article/40020#\">一次搞懂Event loop</a><br></br><a target=\"_blank\" href=\"https://juejin.im/post/5aa5dcabf265da239c7afe1e\">浏览器和Node不同的事件循环</a></p>\n</blockquote>\n</div>\n            </Fragment>\n        )\n    }\n}"],"sourceRoot":""}