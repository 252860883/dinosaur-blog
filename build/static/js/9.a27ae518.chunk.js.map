{"version":3,"sources":["components/headerLink.tsx","article/TypeScript笔记.js"],"names":["Main","clickPosBtn","idName","dom","document","getElementById","window","scrollTo","top","offsetTop","left","behavior","_this2","this","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","className","props","headerLink","map","item","index","level","key","onClick","title","React","Component","Template","_this","Object","_Users_honghuidu_homework_dinosaur_blog_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","_Users_honghuidu_homework_dinosaur_blog_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","_Users_honghuidu_homework_dinosaur_blog_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","call","state","react__WEBPACK_IMPORTED_MODULE_5__","_components_headerLink__WEBPACK_IMPORTED_MODULE_7__","id","target","href"],"mappings":"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","file":"static/js/9.a27ae518.chunk.js","sourcesContent":["import React from 'react'\nimport \"../style/components/headerLink.scss\"\nexport default class Main extends React.Component<any, any>{\n    componentDidMount() { }\n\n    clickPosBtn = (idName: string) => {\n        const dom: any = document.getElementById(idName);\n        window.scrollTo({\n            top: dom.offsetTop - 10,\n            left: 0,\n            behavior: 'smooth'\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"headerLink\">\n                <div className=\"content\">\n                    <div className=\"real-content\">\n                        <div className='tag'>Reading Assistance ·</div>\n                        {\n                            this.props.headerLink.map((item: any, index: number) => {\n                                return <span className={'a' + item.level} key={index} onClick={() => this.clickPosBtn(item.title)}>{item.title}</span>\n                            })\n                        }\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}","import React, { Fragment } from 'react'\nimport '../style/main.scss'\nimport HeaderLink from \"../components/headerLink\"\nexport default class Template extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            headerLink: [{\"level\":\"h2\",\"title\":\"了解 TypeScript\"},{\"level\":\"h3\",\"title\":\"对象类型\"},{\"level\":\"h4\",\"title\":\"基础数据类型\"},{\"level\":\"h4\",\"title\":\"任意类型\"},{\"level\":\"h4\",\"title\":\"类型推论\"},{\"level\":\"h4\",\"title\":\"联合类型\"},{\"level\":\"h4\",\"title\":\"数组类型\"},{\"level\":\"h4\",\"title\":\"函数类型\"},{\"level\":\"h4\",\"title\":\"类型断言\"},{\"level\":\"h4\",\"title\":\"类型别名\"},{\"level\":\"h4\",\"title\":\"泛型\"},{\"level\":\"h4\",\"title\":\"内置对象\"},{\"level\":\"h3\",\"title\":\"接口\"},{\"level\":\"h3\",\"title\":\"类\"},{\"level\":\"h3\",\"title\":\"类与接口的结合\"},{\"level\":\"h3\",\"title\":\"参考\"}]\n        }\n    }\n    componentWillMount(){\n    }\n    componentDidMount() {\n    }\n    render() {\n        return (\n            <Fragment>\n                <HeaderLink headerLink={this.state.headerLink}></HeaderLink>\n                <div className=\"article\">\n<div className=\"title-content\"><h1 className=\"title\">TypeScript笔记</h1></div>\n<h2 id='了解 TypeScript'>了解 TypeScript</h2>\n\n<blockquote>\n  <p>TypeScript 是 JavaScript 的一个超集，主要提供了类型系统和对 ES6 的支持。TS 增强了代码的可读性和可维护性。</p>\n</blockquote>\n\n<p>在命令行中输入以下指令就可以在全局享用 TypeScript 语法啦！</p>\n\n<pre><code><span></span>\n<span>npm install -g typescript</span>\n<span></span>\n</code></pre>\n\n<p>编译 TypeScript 也很简单 直接执行指令： <code>tsc 文件名</code> 。</p>\n\n<h3 id='对象类型'>对象类型</h3>\n\n<h4 id='基础数据类型'>基础数据类型</h4>\n\n<p>在 TypeScript 中有六种基础数据类型，其基本的定义格式为<code>let 变量名 : 数据类型 = 变量值</code>。这六种数据类型分别是：<code>boolean</code> <code>number</code> <code>string</code> <code>void</code> <code>undefined</code> <code>null</code>  需要注意，使用基础数据类型时一定要严格按照数据类型赋值，否则编译时会报错。同时还提供了枚举类型方便使用。</p>\n\n<pre><code><span></span>\n<span>/**</span>\n<span> * boolean类型</span>\n<span> * new Boolean() 创造的对象不是布尔值而是一个布尔对象,下面这样写会报错</span>\n<span> * let is: boolean = new Boolean(2);  </span>\n<span> * boolean 是 JavaScript 中的基本类型，而 Boolean 是 JavaScript 中的构造函数。</span>\n<span> */</span>\n<span></span>\n<span>let isDone: boolean = false</span>\n<span></span>\n<span>/**</span>\n<span> * number类型</span>\n<span> */</span>\n<span></span>\n<span>let num_a: number = 6</span>\n<span>let num_b: number = 0xffff</span>\n<span>let num_c: number = NaN</span>\n<span>// 二进制和八进制都会被编译成十进制</span>\n<span>let num_d: number = 0o744</span>\n<span>let num_e: number = 0b111</span>\n<span></span>\n<span>/**</span>\n<span> * 字符串</span>\n<span> */</span>\n<span></span>\n<span>let str_a: string = \"Villion\"</span>\n<span>let str_b = `My name is ${'{'}str_a}.`</span>\n<span></span>\n<span></span>\n<span>/**</span>\n<span> * 空值(void) Null Undefined</span>\n<span> */</span>\n<span></span>\n<span>let void_a: void = undefined</span>\n<span>let und_b: undefined = undefined  // undefined 类型只能被赋值 undefined </span>\n<span>let null_c: null = null  // null 类型只能赋值 null </span>\n<span></span>\n<span>/**</span>\n<span> * 枚举类型</span>\n<span> */</span>\n<span>// enum类型是对JavaScript标准数据类型的一个补充。 </span>\n<span>// 使用枚举类型可以为一组数值赋予友好的名字。默认情况下，从0开始为元素编号。 你也可以手动的指定成员的数值。</span>\n<span>enum Color {'{'}Red,Green,Blue}</span>\n<span>let c:Color = Color.Green;</span>\n<span>enum Days {'{'}Sun, Mon, Tue, Wed, Thu, Fri, Sat}</span>\n<span>console.log(Days[\"Sun\"]) // 0</span>\n<span>console.log(Days[0]); // 'Sun'</span>\n<span></span>\n</code></pre>\n\n<h4 id='任意类型'>任意类型</h4>\n\n<p>和基础数据类型对立，可以赋任何类型的值。在任意值上访问任何属性都是允许的，也允许调用任何方法。通常情况下可以认为 void 与 any 相反。</p>\n\n<pre><code><span></span>\n<span>let any_a: any = \"Dinosaur\"</span>\n<span>any_a.sayHello()</span>\n<span>console.log(any_a.name)</span>\n<span></span>\n</code></pre>\n\n<p>变量如果在声明的时候，未指定其类型，那么它会被识别为任意值类型。</p>\n\n<pre><code><span></span>\n<span>let any_b</span>\n<span>// 等价于</span>\n<span>let any_b: any</span>\n<span></span>\n</code></pre>\n\n<h4 id='类型推论'>类型推论</h4>\n\n<p>如果没有明确的指定类型，那么 TypeScript 会依照<code>类型推论</code>的规则推断出一个类型,但是编译阶段依然会进行报错。</p>\n\n<pre><code><span></span>\n<span>let any_c = \"string\"</span>\n<span>// 等价于</span>\n<span>let any_c: string = \"string\"</span>\n<span></span>\n</code></pre>\n\n<h4 id='联合类型'>联合类型</h4>\n\n<p>联合类型就是一个对象可以是规定内的多种类型。在 TypeScript 中用 <code>|</code> 符号来分割定义的基础类型。当 TypeScript 不确定一个联合类型的变量到底是哪个类型的时候，只能访问此联合类型的所有类型里共有的属性或方法。变量在被赋值的时候，会根据类型推论的规则推断出一个类型。</p>\n\n<pre><code><span></span>\n<span>let fix_a: string | number;</span>\n<span>fix_a = \"aaa\";</span>\n<span>fix_a = 1;</span>\n<span></span>\n</code></pre>\n\n<p>对于联合类型，我们可以设置 <strong>类型别字</strong> 来表示。</p>\n\n<pre><code><span></span>\n<span>type isString = string;</span>\n<span>type isNumber = number;</span>\n<span>type fix = isString | isNumber;</span>\n<span></span>\n<span>let fix_b: fix = 'bbb'</span>\n<span></span>\n</code></pre>\n\n<h4 id='数组类型'>数组类型</h4>\n\n<p>在 TypeScript 中有很多定义方法，分别是<code>类型+[]</code>,<code>数组泛型</code>,<code>接口表示</code>,泛型和接口我们会在后面进行讲解，这里做简单了解即可。</p>\n\n<pre><code><span></span>\n<span>// 表示方法一： 类型+[]</span>\n<span>let arr_a: number[] = [1, 2, 3];</span>\n<span>let arr_b: string[] = ['a', 'b', 'c'];</span>\n<span>// 表示方法二：数组泛型</span>\n<span>let arr_c: Array&lt;number&gt; = [1, 2, 3];</span>\n<span>// 表示方法三：接口</span>\n<span>interface nArray {'{'}</span>\n<span>    [index: number]: number</span>\n<span>}</span>\n<span>let arr_d: nArray = [1, 2, 3, 4];</span>\n<span></span>\n</code></pre>\n\n<p>在赋值时，数组中的每个值都必须按照定义的类型赋值，否则会报错，如果类型不确定可以使用用 <code>any</code> 来表示。</p>\n\n<p>我们常见的<strong>类数组</strong>，比如arguments等,在 TypeScript 都有对应的封装好的接口,如 IArguments, NodeList, HTMLCollection 等直接调用即可。</p>\n\n<pre><code><span></span>\n<span>let args: IArguments = arguments;</span>\n<span></span>\n</code></pre>\n\n<p>拓展一下<strong>元组类型</strong>：允许表示一个已知元素数量和类型的数组，各元素的类型不必相同。</p>\n\n<pre><code><span></span>\n<span>let tuple_x: [string, number];</span>\n<span>tuple_x = ['10', 10];</span>\n<span>// tuple_x = ['10', 10];  // error</span>\n<span></span>\n</code></pre>\n\n<h4 id='函数类型'>函数类型</h4>\n\n<p>函数定义的方式如下代码所示，需要注意传参以及函数输出都要对其进行类型定义，同时不能多输入或者少输入传参。</p>\n\n<pre><code><span></span>\n<span>// 函数声明</span>\n<span>function sum(a: number, b: number): number {'{'}</span>\n<span>    return a + b;</span>\n<span>}</span>\n<span></span>\n<span>// 函数表达式</span>\n<span>let aSum = function (a: number, b: number): number {'{'}</span>\n<span>    return a + b;</span>\n<span>}</span>\n<span></span>\n</code></pre>\n\n<p>我们其实在很多情况下，实际传入的参数情况是不可控制的，那有什么办法可以解决这个问题吗？我们可以在参数的后面加一个 <code>?</code> 来表示这个参数是可选的，但是需注意，可选参数必须要在所有参数的最后位置。同时我们可以采用 ES6 的Rest参数来表示多余的传参。具体表示如下：</p>\n\n<pre><code><span></span>\n<span>// 通过在参数名后面添加 ？ 来表示可选参数</span>\n<span>function lessParams(a: number, b?: number) {'{'}</span>\n<span>}</span>\n<span>// 在参数尾以 ...变量名 形式表示更多参数</span>\n<span>function moreParams(a: number, ...more) {'{'}</span>\n<span>}</span>\n<span>// 传递默认参数的方式如下：</span>\n<span>function sum(a: number = 0, b: number = 0){'{'}</span>\n<span>}</span>\n<span></span>\n</code></pre>\n\n<p>同时 函数同样可以使用 <code>|</code> 和 <code>any</code> 来定义不同的数据类型。</p>\n\n<h4 id='类型断言'>类型断言</h4>\n\n<p>类型断言（Type Assertion）可以用来手动指定一个值的类型。之前提到过，当 TypeScript 不确定一个联合类型的变量到底是哪个类型的时候，我们只能访问此联合类型的所有类型里共有的属性或方法。但是有时候我们需要在不确定类型的时候就使用其中的一个属性或者方法。所以这时候就需要使用<strong>类型断言</strong>了。但是需注意：类型断言不是类型转换，断言成一个联合类型中不存在的类型是不允许的。</p>\n\n<pre><code><span></span>\n<span>function getLength(something: string | number): number {'{'}</span>\n<span>    if ((&lt;string&gt;something).length) {'{'}</span>\n<span>        return (&lt;string&gt;something).length;</span>\n<span>    } else {'{'}</span>\n<span>        return something.toString().length;</span>\n<span>    }</span>\n<span>}</span>\n<span></span>\n</code></pre>\n\n<h4 id='类型别名'>类型别名</h4>\n\n<p>使用type来创建类型别名，类型别名常用于联合类型。</p>\n\n<pre><code><span></span>\n<span>type StringType = string;</span>\n<span>type FunctionType = () =&gt; string;</span>\n<span>type NameOrResolver = StringType | FunctionType;</span>\n<span>function getName(n: NameOrResolver): StringType {'{'}</span>\n<span>    if (typeof n === 'string') {'{'}</span>\n<span>        return n;</span>\n<span>    } else {'{'}</span>\n<span>        return n();</span>\n<span>    }</span>\n<span>}</span>\n<span></span>\n</code></pre>\n\n<h4 id='泛型'>泛型</h4>\n\n<p>有时候我们需要使返回值的类型与传入参数的类型是相同的，这里就引入了<strong>类型变量</strong>来表示：</p>\n\n<pre><code><span></span>\n<span>function identity&lt;T&gt;(arg: T): T {'{'}</span>\n<span>    return arg;</span>\n<span>}</span>\n<span></span>\n</code></pre>\n\n<h4 id='内置对象'>内置对象</h4>\n\n<p>我们知道 JavaScript 中有很多的内置对象可供使用，那么在 TypeScript 中呢，可以直接当做定义好了的类型。</p>\n\n<pre><code><span></span>\n<span>let in_b: Boolean = new Boolean(1);</span>\n<span>let in_e: Error = new Error('Error occurred');</span>\n<span>let in_d: Date = new Date();</span>\n<span>let in_r: RegExp = /[a-z]/;</span>\n<span></span>\n</code></pre>\n\n<p>对于 DOM 和 BOM内置对象，Typescript 中对应了 <code>Document</code>,<code>HTMLElement</code>,<code>Event</code>,<code>NodeList</code>,<code>MouseEvent</code>等。举例：</p>\n\n<pre><code><span></span>\n<span>let body: HTMLElement = document.body;</span>\n<span>let allDiv: NodeList = document.querySelectorAll('div');</span>\n<span>document.addEventListener('click', function(e: MouseEvent) {'{'}</span>\n<span>  // Do something</span>\n<span>});</span>\n<span></span>\n</code></pre>\n\n<h3 id='接口'>接口</h3>\n\n<p>在面向对象语言中，接口（Interfaces）是一个很重要的概念，它是对行为的抽象，而具体如何行动需要由类（classes）去实现（implements）。TypeScript的核心原则之一是对值所具有的结构进行类型检查。 它有时被称做“鸭式辨型法”或“结构性子类型化”。 在TypeScript里，接口的作用就是为这些类型命名和为你的代码或第三方代码定义契约。同时在接口中可以设置 可选属性、任意属性、只读属性等。<br></br>举个🌰：</p>\n\n<pre><code><span></span>\n<span>interface Person {'{'}</span>\n<span>    readonly id: number, // 只读属性，只能在创建的时候被复制 </span>\n<span>    name: string,</span>\n<span>    age: number,</span>\n<span>    height?: number, // xx? 表示属性可选</span>\n<span>    [propName: string]: any // 一旦定义了任意属性，那么确定属性和可选属性都必须是它的子属性：</span>\n<span>}</span>\n<span></span>\n<span>let tom: Person = {'{'}</span>\n<span>    name: 'honghui',</span>\n<span>    age: 16,</span>\n<span>    height: 175,</span>\n<span>    weight: 70</span>\n<span>}</span>\n<span></span>\n<span>// tom.id = 001  // Error</span>\n<span></span>\n</code></pre>\n\n<p>和类一样，接口也是可以继承的：</p>\n\n<pre><code><span></span>\n<span>// extends 类的继承</span>\n<span>class Cat extends Animal {'{'}</span>\n<span>    constructor(name) {'{'}</span>\n<span>        super(name);</span>\n<span>        // this.cat = 'meow';</span>\n<span>    }</span>\n<span>    sayHi() {'{'}</span>\n<span>        return `Meow~ ${'{'}super.sayHi()}`</span>\n<span>    }</span>\n<span>}</span>\n<span></span>\n<span>let tomCat = new Cat('tom');</span>\n<span>console.log(tomCat.sayHi()) // Meow~ My name is tom</span>\n<span></span>\n</code></pre>\n\n<h3 id='类'>类</h3>\n\n<p>下面是一个类的简易Demo：</p>\n\n<pre><code><span></span>\n<span>class Animal {'{'}</span>\n<span>    name: string;</span>\n<span>    constructor(name) {'{'}</span>\n<span>        this.name = name;</span>\n<span>    }</span>\n<span>    sayHi() {'{'}</span>\n<span>        return `My name is ${'{'}this.name}`</span>\n<span>    }</span>\n<span>}</span>\n<span>let cat = new Animal('cat');</span>\n<span>console.log(cat.sayHi()) // My name is cat</span>\n<span></span>\n</code></pre>\n\n<p>下面讲讲几个关于类的知识点：<br></br>* <strong>继承</strong> <br></br>    基于类的程序设计中一种最基本的模式是允许使用继承来扩展现有的类。使用 <code>extends</code> 关键字实现继承。 <br></br>* <strong>修饰符</strong> <br></br>    1. <strong>public</strong>： typescript 默认情况下成员都是 public 可访问的。<br></br>    2. <strong>private</strong>： 当成员被标记为 private 时，它就不能在声明它的类的外部访问。<br></br>    3. <strong>protected</strong>： protected 修饰符与 private 的区别是 protected 成员在派生类中仍然可以访问。<br></br>    4. <strong>readonly</strong>： readonly 关键字将属性设置为只读的。 只读属性必须在声明时或构造函数里被初始化。</p>\n\n<p>具体实现可以看如下demo：</p>\n\n<pre><code><span></span>\n<span>class Animal {'{'}</span>\n<span>    protected name: string;  // 派生类中可访问</span>\n<span>    constructor(name) {'{'}</span>\n<span>        this.name = name;</span>\n<span>    }</span>\n<span>}</span>\n<span></span>\n<span>class Cat extends Animal {'{'}</span>\n<span>    public food: string;</span>\n<span>    private secret:string;//私有属性，外部不能访问</span>\n<span>    constructor(name) {'{'}</span>\n<span>        super(name);</span>\n<span>        this.food = 'fish';</span>\n<span>        this.secret = 'I love dog'</span>\n<span>    }</span>\n<span>    sayHi() {'{'}</span>\n<span>        return `Meow~ ${'{'}super.sayHi()}`</span>\n<span>    }</span>\n<span>}</span>\n<span></span>\n<span>let tomCat = new Cat('tom');</span>\n<span>console.log(tomCat.sayHi()) // Meow~ My name is tom</span>\n<span>console.log(\"cat's food is \" + tomCat.food)</span>\n<span>// console.log(tomCat.secret); // Error</span>\n<span></span>\n</code></pre>\n\n<p>同时，TypeScript支持通过 <strong>getters/setters</strong> 来截取对对象成员的访问，可以有效的控制对对象成员的访问：</p>\n\n<pre><code><span></span>\n<span>class Employee {'{'}</span>\n<span>    private _fullName: string;</span>\n<span></span>\n<span>    get fullName(): string {'{'}</span>\n<span>        return this._fullName</span>\n<span>    }</span>\n<span></span>\n<span>    set fullName(newName: string) {'{'}</span>\n<span>        if (newName != 'admin') {'{'}</span>\n<span>            this._fullName = newName</span>\n<span>        } else {'{'}</span>\n<span>            console.log('NewName is Invalid')</span>\n<span>        }</span>\n<span>    }</span>\n<span>}</span>\n<span></span>\n<span>let employee = new Employee();</span>\n<span>employee.fullName = 'danny';</span>\n<span>console.log(employee.fullName) // danny</span>\n<span>employee.fullName = 'admin' // NewName is Invalid</span>\n<span></span>\n</code></pre>\n\n<h3 id='类与接口的结合'>类与接口的结合</h3>\n\n<p>></p>\n\n<h3 id='参考'>参考</h3>\n\n<p><a target=\"_blank\" href=\"https://ts.xcatliu.com/\">TypeScript入门教程</a> <br></br><a target=\"_blank\" href=\"https://www.tslang.cn/docs/home.html\">TypeScript文档</a><br></br><a target=\"_blank\" href=\"https://mp.weixin.qq.com/s/JYHme1lZHFro9S1Qd_7pGQ\">一篇朴实的文章带捋完TypeScript基础</a></p>\n</div>\n            </Fragment>\n        )\n    }\n}"],"sourceRoot":""}