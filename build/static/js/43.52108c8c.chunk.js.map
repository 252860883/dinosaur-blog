{"version":3,"sources":["components/headerLink.tsx","article/用Shell写个自动生成小程序文件模版的脚本吧.js"],"names":["Main","clickPosBtn","idName","dom","document","getElementById","window","scrollTo","top","offsetTop","left","behavior","_this2","this","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","className","props","headerLink","map","item","index","level","key","onClick","title","React","Component","Template","_this","Object","_Users_honghuidu_homework_dinosaur_blog_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","_Users_honghuidu_homework_dinosaur_blog_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","_Users_honghuidu_homework_dinosaur_blog_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","call","state","react__WEBPACK_IMPORTED_MODULE_5__","_components_headerLink__WEBPACK_IMPORTED_MODULE_7__","id","target","href","src","alt"],"mappings":"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","file":"static/js/43.52108c8c.chunk.js","sourcesContent":["import React from 'react'\nimport \"../style/components/headerLink.scss\"\nexport default class Main extends React.Component<any, any>{\n    componentDidMount() { }\n\n    clickPosBtn = (idName: string) => {\n        const dom: any = document.getElementById(idName);\n        window.scrollTo({\n            top: dom.offsetTop - 10,\n            left: 0,\n            behavior: 'smooth'\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"headerLink\">\n                <div className=\"content\">\n                    <div className=\"real-content\">\n                        <div className='tag'>Reading Assistance ·</div>\n                        {\n                            this.props.headerLink.map((item: any, index: number) => {\n                                return <span className={'a' + item.level} key={index} onClick={() => this.clickPosBtn(item.title)}>{item.title}</span>\n                            })\n                        }\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}","import React, { Fragment } from 'react'\nimport '../style/main.scss'\nimport HeaderLink from \"../components/headerLink\"\nexport default class Template extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            headerLink: [{\"level\":\"h2\",\"title\":\"前言\"},{\"level\":\"h2\",\"title\":\"Shell脚本 实现\"},{\"level\":\"h2\",\"title\":\"nodejs环境 实现\"}]\n        }\n    }\n    componentWillMount(){\n    }\n    componentDidMount() {\n    }\n    render() {\n        return (\n            <Fragment>\n                <HeaderLink headerLink={this.state.headerLink}></HeaderLink>\n                <div className=\"article\">\n<div className=\"title-content\"><h1 className=\"title\">实现一个自动生成小程序文件模版的脚本</h1></div>\n<h2 id='前言'>前言</h2>\n\n<p>搞过小程序开发的诸位程序员们一定面临一个问题，就是编辑器好难用啊！新建页面好难用！手抖不小心建错了还要打开文件夹删了文件再去编辑器重新创建。哎呀！麻烦死了！</p>\n\n<p>直到某天，同事：“咱们写个自动创建文件模版的脚本吧？”  “开搞！”</p>\n\n<h2 id='Shell脚本 实现'>Shell脚本 实现</h2>\n\n<p>Shell 是一个用 C 语言编写的程序，它是用户使用 Linux 的桥梁。Shell 既是一种命令语言，又是一种程序设计语言。我们下面的脚本也是通过 Shell语言来实现的。如果你还不了解什么是 Shell 语法的话，可以先熟悉一下语法，入门不难。<a target=\"_blank\" href=\"http://www.runoob.com/linux/linux-shell.html\">点击这里</a>。</p>\n\n<p>首先我们执行 <code>npm init</code> 指令，创建 <code>package.json</code> 文件。然后在该文件下添加如下代码：</p>\n\n<pre><code><span></span>\n<span>...</span>\n<span>\"scripts\": {'{'}</span>\n<span>    \"test\": \"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\",</span>\n<span>    \"set\":\"sh ./cli/clone.sh\"</span>\n<span>},</span>\n<span>...</span>\n<span></span>\n</code></pre>\n\n<p>然后我们创建一个 <code>cli</code> 文件夹，在下面我们copy一下初始化的page文件夹和component文件夹。同时创建一个 <code>clone.sh</code> 文件。具体的文件夹目录可见下：</p>\n\n<pre><code><span></span>\n<span>...</span>\n<span>├── cli</span>\n<span>│   ├── clone.sh</span>\n<span>│   ├── component</span>\n<span>│   │   ├── component.js</span>\n<span>│   │   ├── component.json</span>\n<span>│   │   ├── component.wxml</span>\n<span>│   │   └── component.wxss</span>\n<span>│   └── page</span>\n<span>│       ├── page.js</span>\n<span>│       ├── page.json</span>\n<span>│       ├── page.wxml</span>\n<span>│       └── page.wxss</span>\n<span>...</span>\n<span></span>\n</code></pre>\n\n<p>下面我们就来编写shell脚本吧，语法都不是很难，所以就不一一解析了，直接见代码：</p>\n\n<pre><code><span></span>\n<span>#!/bin/bash</span>\n<span>num=(\"1\" \"2\" \"3\")</span>\n<span>pathname=(\"pages\" \"component\" \"packages\")</span>\n<span>template=(\"cli/page\" \"cli/component\" \"cli/page\")</span>\n<span></span>\n<span># 复制page函数</span>\n<span>function copyFile(){'{'}</span>\n<span>  while [ -z $pageName ]</span>\n<span>  do </span>\n<span>    printf \"\\033[32mplease input page Name : \\033[0m\"</span>\n<span>    read pageName</span>\n<span>  done</span>\n<span>  targetPath=\"${'{'}pathname[$1]}/$pageName\"</span>\n<span>  if [ -d $targetPath ]</span>\n<span>    then</span>\n<span>      echo \"\\033[31mwarn: page [$pageName] is exist!\\033[0m\"</span>\n<span>  else</span>\n<span>    # cp 复制模版到新建路径</span>\n<span>    cp -iR ${'{'}template[$1]} $targetPath </span>\n<span>    for file in `ls ./${'{'}template[$1]}`</span>\n<span>    do</span>\n<span>      suffixName=${'{'}file#*.}</span>\n<span>      lastName=\"$pageName.$suffixName\"</span>\n<span>      # mv 文件重命名</span>\n<span>      mv  \"$targetPath/$file\" \"$targetPath/$lastName\"</span>\n<span>    done </span>\n<span>  echo \"page [$pageName] create complete!\"</span>\n<span>  fi</span>\n<span>}</span>\n<span></span>\n<span># 判断类型</span>\n<span>function choiceType(){'{'}</span>\n<span>  # 复制page</span>\n<span>  if [ $type == ${'{'}num[0]} ]</span>\n<span>    then </span>\n<span>      copyFile 0</span>\n<span>  elif [ $type == ${'{'}num[1]} ]</span>\n<span>    then</span>\n<span>      copyFile 1</span>\n<span>  elif [ $type == ${'{'}num[2]} ]</span>\n<span>    then</span>\n<span>      copyFile 2</span>\n<span>  fi</span>\n<span>}</span>\n<span></span>\n<span># -z 检查字符串长度是否为0</span>\n<span>while [ -z $type ] || [[ $type != ${'{'}num[0]} &amp;&amp; $type != ${'{'}num[1]} &amp;&amp; $type != ${'{'}num[2]}  ]]</span>\n<span>do</span>\n<span>  echo \"\\033[32mplease input your file type: \\033[0m\"</span>\n<span>  echo \"【1】page\"</span>\n<span>  echo \"【2】compoment\"</span>\n<span>  echo \"【3】package\"</span>\n<span>  read type</span>\n<span>done</span>\n<span></span>\n<span>choiceType</span>\n<span></span>\n</code></pre>\n\n<p>下面，我们就可以来随意的创建啦！打开命令行，执行 <code>npm run set</code> 就可以来创建。</p>\n\n<h2 id='nodejs环境 实现'>nodejs环境 实现</h2>\n\n<blockquote>\n  <p>上面我们通过shell语法来实现了一个简单的文件克隆脚本，但是这个脚本还存在诸多不足，比如：选择某一种情况的时候必须手动输入对应值、多级分包等问题。下面我们就来试试用nodejs来实现这个脚本。</p>\n</blockquote>\n\n<p>首先我们在创建的 <code>package.json</code> 文件下添加如下代码,同时创建<code>clone.js</code>文件：</p>\n\n<pre><code><span></span>\n<span>...</span>\n<span>\"scripts\": {'{'}</span>\n<span>    \"test\": \"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\",</span>\n<span>    \"set\":\"sh ./cli/clone.sh\",</span>\n<span>    \"create\": \"node ./cli/clone.js\"</span>\n<span>},</span>\n<span>...</span>\n<span></span>\n</code></pre>\n\n<p>与shell脚本不同的是我们还需要 <code>npm install</code> 安装依赖。这里需要用到以下几个依赖：<br></br><code>fs</code>是nodejs里面很重要的文件模块，我们对于文件的增删改查、粘贴、赋值都与此相关；<br></br><code>path</code>模块用于处理文件与目录的路径，我们都知道现在的前端项目大部分都是模块化开发，所以从中涉及到的路径问题由它来解决；<br></br><code>chalk</code>就是一个终端样式修饰器，我们可以做出好看的终端界面。重点来了；<br></br><code>inquirer</code>试图为NodeJs做一个可嵌入式的美观的命令行界面，我们这里也是使用这个依赖可以很便捷的进行终端输出的改造，比如上下选择，单选、多选等多种形态，具体可以移步<a target=\"_blank\" href=\"https://www.npmjs.com/package/inquirer\">这里查看更多</a>。</p>\n\n<p><img src=\"http://wx2.sinaimg.cn/mw690/a73bc6a1ly1fyzfn6lq00j20ho04ugnk.jpg\" alt=\"image\" title=\"\" /></p>\n\n<p>下面我们就剖析如何用代码实现了，首先我们把 <code>inquirer</code> 架子搭起来，简单的两个异步嵌套操作。</p>\n\n<pre><code><span></span>\n<span></span>\n<span>// 首先选择一个类目</span>\n<span>inquirer.prompt([{'{'}</span>\n<span>    type: 'list',</span>\n<span>    name: 'type',</span>\n<span>    message: 'Select a type you will create:',</span>\n<span>    choices: ['page', 'component', 'package'],</span>\n<span>}]).then((answers) =&gt; {'{'}</span>\n<span>    console.log(chalk.yellow(\"如果建立子目录直接加'/'分隔即可\"))</span>\n<span>    // 输入文件或目录名</span>\n<span>    inquirer.prompt([{'{'}</span>\n<span>        type: 'input',</span>\n<span>        name: 'name',</span>\n<span>        message: 'Input new page name:'</span>\n<span>    }]).then((folder) =&gt; {'{'}</span>\n<span>        &lt;!-- 这里创建文件夹 --&gt;</span>\n<span>        mkdirs(...);</span>\n<span>        &lt;!-- 这里copy文件 --&gt;</span>\n<span>        ...</span>\n<span>        copyRealFile(...);</span>\n<span>    })</span>\n<span>})</span>\n<span></span>\n<span></span>\n</code></pre>\n\n<p>上面一个简单的二次输入指令就大致做好了。下面我们就来完成 <code>mkdirs</code> 和 <code>copyRealFile</code> 函数的逻辑吧。<br></br>为了方便我首先在全局定义了一个路径映射：</p>\n\n<pre><code><span></span>\n<span>let temFolders = {'{'}</span>\n<span>    \"package\": path.join(__dirname, 'page'),</span>\n<span>    \"page\": path.join(__dirname, 'page'),</span>\n<span>    \"component\": path.join(__dirname, 'component')</span>\n<span>}</span>\n<span>let targetFolderRoots = {'{'}</span>\n<span>    \"package\": \"packages/\",</span>\n<span>    \"page\": \"pages/\",</span>\n<span>    \"component\": \"component/\"</span>\n<span>}</span>\n<span></span>\n</code></pre>\n\n<p>上面两个映射对象分别代表 模版文件根路径 和 目标文件夹。<br></br>然后我们来完成 <code>mkdirs</code> 创建文件夹函数，这里我们需要考虑到分包可能有多层子文件夹，所有我们在输入时要求 <code>/</code> 符为文件夹分隔符，所以这里我们也要做好相应的兼容：</p>\n\n<pre><code><span></span>\n<span>/**</span>\n<span> * 创建文件夹</span>\n<span> * @param {'{'}String} folder 终端输入的路径</span>\n<span> * @param {'{'}String} targetFolderRoot 输出的目标文件夹</span>\n<span> */</span>\n<span>function mkdirs(folder, targetFolderRoot) {'{'}</span>\n<span>    const folderName = folder.split('/')</span>\n<span>    folderName.push('');</span>\n<span>    folderName.reduce((total, folderItem) =&gt; {'{'}</span>\n<span>        console.log(folderItem);</span>\n<span>        const hasFolder = fs.existsSync(`${'{'}targetFolderRoot + total}`)</span>\n<span>        !hasFolder &amp;&amp; fs.mkdirSync(`${'{'}targetFolderRoot + total}`)</span>\n<span>        if (!folderItem &amp;&amp; hasFolder) console.error(chalk.red(`== sorry, folder ${'{'}folder} is exist or your input is error! ==`))</span>\n<span>        return total + \"/\" + folderItem</span>\n<span>    })</span>\n<span>}</span>\n<span></span>\n<span></span>\n</code></pre>\n\n<p>文件夹创建好，我们就需要核心的复制逻辑了：</p>\n\n<pre><code><span></span>\n<span>/**</span>\n<span> * 克隆实际的底层文件列表</span>\n<span> * @param {'{'}String} folder 终端输入的路径</span>\n<span> * @param {'{'}String} type 用户选择的类型</span>\n<span> */</span>\n<span></span>\n<span>function copyRealFile(folder,type ) {'{'}</span>\n<span>    let targetFolderRoot =  targetFolderRoots[type];</span>\n<span>    let temFolder = temFolders[type];</span>\n<span>    let fileName = folder.split('/').pop()</span>\n<span>    let targetFolder = `${'{'}targetFolderRoot + folder}/${'{'}fileName}`;</span>\n<span>    fs.readdirSync(temFolder).forEach((val, index) =&gt; {'{'}</span>\n<span>        const extname = path.extname(val);</span>\n<span>        let temRealFile = path.join(temFolder, `${'{'}val}`);</span>\n<span>        let targetFile = targetFolder + extname;</span>\n<span>        console.log(targetFolder);</span>\n<span>        fs.writeFileSync(targetFile, fs.readFileSync(temRealFile), (err) =&gt; {'{'}</span>\n<span>            if (err) throw err;</span>\n<span>            console.log('文件已保存');</span>\n<span>        });</span>\n<span></span>\n<span>    })</span>\n<span>}</span>\n<span></span>\n<span></span>\n</code></pre>\n\n<p>等一下，我们好像落了点东西？如果我们在小程序中创建 page 的话，app.json 的 pages会默认增加新建的page路径：</p>\n\n<pre><code><span></span>\n<span>// app.json</span>\n<span></span>\n<span>{'{'}</span>\n<span>    \"pages\": [</span>\n<span>        \"pages/index/index\",</span>\n<span>        \"pages/page2/index\",</span>\n<span>        \"pages/logs/logs\" /* 这个是新增的页面路径 */</span>\n<span>    ],</span>\n<span>    \"window\": {'{'}</span>\n<span>        \"backgroundTextStyle\": \"light\",</span>\n<span>        \"navigationBarBackgroundColor\": \"#000\",</span>\n<span>        \"navigationBarTitleText\": \"WeChat\",</span>\n<span>        \"navigationBarTextStyle\": \"white\"</span>\n<span>    },</span>\n<span>    \"usingComponents\": {'{'}</span>\n<span>        \"ec-canvas\": \"libs/ec-canvas/ec-canvas\"</span>\n<span>    }</span>\n<span>}</span>\n<span></span>\n</code></pre>\n\n<p>所以我们还需要构建一个函数在page文件创建后更新app.json。这里我们创建 addPageInfoToApp 函数，将新增的page路径添加进去。</p>\n\n<pre><code><span></span>\n<span>function addPageInfoToApp(fileName) {'{'}</span>\n<span>    fs.readFile('./app.json', function (err, data) {'{'}</span>\n<span>        if (err) {'{'}</span>\n<span>            return console.error(err)</span>\n<span>        }</span>\n<span>        var person = data.toString();//将二进制的数据转换为字符串</span>\n<span>        person = JSON.parse(person);//将字符串转换为json对象</span>\n<span>        person.pages.push(fileName);</span>\n<span>        const outputData = JSON.stringify(person,null,\"\\t\");//将json数据转换为字符串类型，需要保留回车符，注意格式</span>\n<span>        fs.writeFile('./app.json',outputData,function(err){'{'}</span>\n<span>            if(err){'{'}</span>\n<span>                console.error(err);</span>\n<span>            }</span>\n<span>            console.log('文件建好啦！');</span>\n<span>        })</span>\n<span>        console.log(person.pages);</span>\n<span>    })</span>\n<span>}</span>\n<span></span>\n</code></pre>\n\n<p>然后在 copyRealFile 函数的最后添加逻辑 ：</p>\n\n<pre><code><span></span>\n<span>function copyRealFile(folder,type ) {'{'}</span>\n<span>    ...</span>\n<span></span>\n<span>    type == 'page' &amp;&amp; addPageInfoToApp(targetFolder)</span>\n<span>}</span>\n<span></span>\n</code></pre>\n\n<p>然后在我们的 <code>inquirer</code>回调中按如下代码传参：</p>\n\n<pre><code><span></span>\n<span>...</span>\n<span>.then((folder) =&gt; {'{'}</span>\n<span>        mkdirs(folder.name, targetFolderRoots[answers.type]);</span>\n<span>        copyRealFile(folder.name,targetFolderRoots[answers.type], temFolders[answers.type]);</span>\n<span>    })</span>\n<span>...</span>\n<span></span>\n</code></pre>\n\n<p>最后，大功告成！我们就可以执行 <code>npm run create</code> 指令来体验一下了。</p>\n\n<blockquote>\n  <p>源码：<br></br><a target=\"_blank\" href=\"https://github.com/MagicalDinosaur/smallProgramDemo/blob/master/cli/clone.js\">https://github.com/MagicalDinosaur/smallProgramDemo/blob/master/cli/clone.js</a><br></br>https://github.com/MagicalDinosaur/smallProgramDemo/blob/master/cli/clone.sh</p>\n</blockquote>\n</div>\n            </Fragment>\n        )\n    }\n}"],"sourceRoot":""}