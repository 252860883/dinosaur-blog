{"version":3,"sources":["components/headerLink.tsx","article/React学习笔记-Redux.js"],"names":["Main","clickPosBtn","idName","dom","document","getElementById","window","scrollTo","top","offsetTop","left","behavior","_this2","this","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","className","props","headerLink","map","item","index","level","key","onClick","title","React","Component","Template","_this","Object","_Users_honghuidu_homework_dinosaur_blog_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","_Users_honghuidu_homework_dinosaur_blog_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","_Users_honghuidu_homework_dinosaur_blog_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","call","state","react__WEBPACK_IMPORTED_MODULE_5__","_components_headerLink__WEBPACK_IMPORTED_MODULE_7__","id"],"mappings":"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","file":"static/js/7.d5e0491d.chunk.js","sourcesContent":["import React from 'react'\nimport \"../style/components/headerLink.scss\"\nexport default class Main extends React.Component<any, any>{\n    componentDidMount() { }\n\n    clickPosBtn = (idName: string) => {\n        const dom: any = document.getElementById(idName);\n        window.scrollTo({\n            top: dom.offsetTop - 10,\n            left: 0,\n            behavior: 'smooth'\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"headerLink\">\n                <div className=\"content\">\n                    <div className=\"real-content\">\n                        <div className='tag'>Reading Assistance ·</div>\n                        {\n                            this.props.headerLink.map((item: any, index: number) => {\n                                return <span className={'a' + item.level} key={index} onClick={() => this.clickPosBtn(item.title)}>{item.title}</span>\n                            })\n                        }\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}","import React, { Fragment } from 'react'\nimport '../style/main.scss'\nimport HeaderLink from \"../components/headerLink\"\nexport default class Template extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            headerLink: [{\"level\":\"h3\",\"title\":\"Action\"},{\"level\":\"h3\",\"title\":\"Reducer\"},{\"level\":\"h3\",\"title\":\"Store\"},{\"level\":\"h3\",\"title\":\"数据流\"},{\"level\":\"h3\",\"title\":\"React 中使用 Redux\"}]\n        }\n    }\n    componentWillMount(){\n    }\n    componentDidMount() {\n    }\n    render() {\n        return (\n            <Fragment>\n                <HeaderLink headerLink={this.state.headerLink}></HeaderLink>\n                <div className=\"article\">\n<div className=\"title-content\"><h1 className=\"title\">React学习笔记之Redux</h1></div>\n<blockquote>\n  <p>Redux 是一个状态管理器。那什么是状态呢？简单来说，状态就是数据。Redux支持 React、Angular、Ember、jQuery 甚至纯 JavaScript，不是只在 React 中才可以使用，</p>\n</blockquote>\n\n<h3 id='Action'>Action</h3>\n\n<p>Action 是把数据从应用传到 store 的有效载荷。它是 store 数据的唯一来源。实际应用中一般通过 store.dispatch() 将 action 传到 store。举个例子：</p>\n\n<pre><code><span></span>\n<span>{'{'}</span>\n<span>    type:'ADD_TODO',</span>\n<span>    count:10</span>\n<span>}</span>\n<span></span>\n</code></pre>\n\n<p>本质上讲，Action就是一个普通的对象，Redux 约定，必须使用一个字符串类型（一般大写）的 type 字段来表示要执行的动作，同时实际项目中一般会在新建数据的时候生成唯一的 ID 作为数据的引用标识。尽量减少在 action 中传递数据。</p>\n\n<p>在 Redux 中，Action创建函数只是一个返回action的函数，把创建函数的结果传递给 dispatch() 即可出发一次 dispath过程。</p>\n\n<pre><code><span></span>\n<span>// action 创建函数</span>\n<span>function addTodo(text) {'{'}</span>\n<span>  return {'{'}</span>\n<span>    type: ADD_TODO,</span>\n<span>    text</span>\n<span>  }</span>\n<span>}</span>\n<span>// dispath 过程</span>\n<span>dispatch(addTodo(text))</span>\n<span></span>\n</code></pre>\n\n<h3 id='Reducer'>Reducer</h3>\n\n<p>Reducers 指定了应用状态的变化如何响应 actions 并发送到 store 的(根据action响应state)，记住 actions 只是描述了有事情发生了这一事实，并没有描述应用如何更新 state。reducer格式如下：</p>\n\n<pre><code><span></span>\n<span>(previousState, action) =&gt; newState</span>\n<span></span>\n</code></pre>\n\n<p>Reducer是纯函数，一定要保持纯净，只要传入参数相同，返回计算得到的下一个 state 就一定相同。没有特殊情况、没有副作用，没有 API 请求、没有变量修改，单纯执行计算。</p>\n\n<p>如果业务量庞大我们可能会有很多的reducer，所以为了实现拆分，可以通过 <code>combineReducers</code> 函数合并起来:</p>\n\n<pre><code><span></span>\n<span>...</span>\n<span></span>\n<span>const todoApp = combineReducers({'{'}</span>\n<span>  visibilityFilter,</span>\n<span>  todos</span>\n<span>})</span>\n<span>export default todoApp</span>\n<span></span>\n</code></pre>\n\n<h3 id='Store'>Store</h3>\n\n<p>我们已经知道了 action 来描述“发生了什么”，reducer来根据 action 更新 state。那 Store 就是把它们联系到一起的对象。那 store 有什么职责呢？</p>\n\n<ul>\n<li>维持应用的 state;</li>\n<li>提供了 <code>getState()</code> 获取 state;</li>\n<li>提供了 <code>dispath()</code> 更新 state;</li>\n<li>通过 <code>subscribe(listener)</code> 方法注册监听器;</li>\n<li>通过 <code>subscribe(listener)</code> 返回的函数注销监听器.</li>\n</ul>\n\n<p>需要注意 Redux 应用只有一个单一的 store。创建 store 也非常的方便：</p>\n\n<pre><code><span></span>\n<span>import {'{'} createStore } from 'redux'</span>\n<span>import todoApp from './redux/reducers.js'</span>\n<span></span>\n<span>let store = createStore(todoApp)</span>\n<span></span>\n</code></pre>\n\n<h3 id='数据流'>数据流</h3>\n\n<p>严格的单向数据流是 Redux 的设计核心。一般情况下遵循四个步骤：<br></br>1. store.dispatch(action)<br></br>2. Store 把 state 和 acgion 两个参数传入 reducer<br></br>3. 根 reducer 把多个子 reducer 输出合并成一个单一的 state 树</p>\n\n<h3 id='React 中使用 Redux'>React 中使用 Redux</h3>\n</div>\n            </Fragment>\n        )\n    }\n}"],"sourceRoot":""}