{"version":3,"sources":["components/headerLink.tsx","article/小程序实现仿KeepApp的滑动图表.js"],"names":["Main","clickPosBtn","idName","dom","document","getElementById","window","scrollTo","top","offsetTop","left","behavior","_this2","this","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","className","props","headerLink","map","item","index","level","key","onClick","title","React","Component","Template","_this","Object","_Users_honghuidu_homework_dinosaur_blog_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","_Users_honghuidu_homework_dinosaur_blog_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","_Users_honghuidu_homework_dinosaur_blog_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","call","state","react__WEBPACK_IMPORTED_MODULE_5__","_components_headerLink__WEBPACK_IMPORTED_MODULE_7__","src","alt","id"],"mappings":"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","file":"static/js/35.9ea4d721.chunk.js","sourcesContent":["import React from 'react'\nimport \"../style/components/headerLink.scss\"\nexport default class Main extends React.Component<any, any>{\n    componentDidMount() { }\n\n    clickPosBtn = (idName: string) => {\n        const dom: any = document.getElementById(idName);\n        window.scrollTo({\n            top: dom.offsetTop - 10,\n            left: 0,\n            behavior: 'smooth'\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"headerLink\">\n                <div className=\"content\">\n                    <div className=\"real-content\">\n                        <div className='tag'>Reading Assistance ·</div>\n                        {\n                            this.props.headerLink.map((item: any, index: number) => {\n                                return <span className={'a' + item.level} key={index} onClick={() => this.clickPosBtn(item.title)}>{item.title}</span>\n                            })\n                        }\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}","import React, { Fragment } from 'react'\nimport '../style/main.scss'\nimport HeaderLink from \"../components/headerLink\"\nexport default class Template extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            headerLink: [{\"level\":\"h3\",\"title\":\"第一次尝试，利用echarts实现\"},{\"level\":\"h3\",\"title\":\"第二次尝试，原生view标签实现\"},{\"level\":\"h3\",\"title\":\"第三次尝试，小程序组件 scroll-view\"}]\n        }\n    }\n    componentWillMount(){\n    }\n    componentDidMount() {\n    }\n    render() {\n        return (\n            <Fragment>\n                <HeaderLink headerLink={this.state.headerLink}></HeaderLink>\n                <div className=\"article\">\n<div className=\"title-content\"><h1 className=\"title\">小程序实现仿KeepApp的滑动图表</h1></div>\n<p>最近写小程序令人很头大的一个问题就是画图表，甚至和同事抱怨一通“我很热爱前端开发（如果不画图表）”。小程序的图表echarts-for-weixin，是echarts对于微信小程序的一个兼容方案，由于开源不久，坑用手指头加脚趾头都数不过来的，也是很心累。<br></br>最近产品新增需求，又要加图表了，一听到图表众程序员心一提。这次新增的图表是类似KEEP软件的滑动柱状图，不仅展示还要动态的展示数据，不了解KEEP可以看看下面的截图。<br></br><img src=\"http://wx4.sinaimg.cn/mw690/a73bc6a1ly9frarqxwf8lj20bb0ii3zs.jpg\" alt=\"image\" title=\"\" /><br></br>主要就是通过拖动图表来定位展示数据。拿到了原型图就开始来尝试实现了。</p>\n\n<h3 id='第一次尝试，利用echarts实现'>第一次尝试，利用echarts实现</h3>\n\n<p>首先利用echarts来实现滑动图表组件，官方配置项提供了dataZoom配置项可以设置x轴滑动展示。实现起来非常方便，官方也给出了例子来进行展示，但是，但是，不知道echarts官网怎么设计的这个坐标轴滚动的交互，这效果有点一言难尽（见下图）。不仅坐标轴会随着可是区域数轴的值变化，而且这过渡效果太bug了，完全不是产品get的效果呀。同时在小程序中还需要获取到当前可视区域中心的坐标值，这些也是非常难拿到的，echarts也没有对外开发类似的接口（可实现的方案是通过formatter遍历获取），所以，这个方案淘汰。<br></br><img src=\"http://wx2.sinaimg.cn/mw690/a73bc6a1ly1frauwp0f23g209005ygp4.gif\" alt=\"image\" title=\"\" /></p>\n\n<h3 id='第二次尝试，原生view标签实现'>第二次尝试，原生view标签实现</h3>\n\n<p>既然echarts不行，那咱们试试原生view标签自己造吧，构建好结构，结合data也能正常显示图表。万事俱备，只欠滑动。这里需要涉及到三个事件监听 touchstart、touchmove、touchend。在touchstart时记录手指触碰的x坐标记作startX，在touchmove时期记录当前手指触碰的x坐标，和startX作差得出移动举例moveX，这是给图表区设置transform的translateX为moveX的单位，使得图表可以跟随手指实时滑动。当touchend时，清除startX等数据，滑动结束，再记录当前中心点的索引，进行对应请求显示。<br></br>在开发者工具中功能基本实现，且没有明显bug，开始上机测试。这一调试就出大问题了，由于move时不断进行修改css的操作，小程序变得非常卡，非常影响用户体验，虽然加了节流函数还是不流畅，所以，第二种方案做废。</p>\n\n<h3 id='第三次尝试，小程序组件 scroll-view'>第三次尝试，小程序组件 scroll-view</h3>\n\n<p>了解小程序的开发人员肯定用到过小程序组件 scroll-view。翻看文档scroll-view有一个 scroll-left 属性，设置横向滚动条的位置。这样通过滚动条的位置岂不是很方便的就能捕获到当前中心位置的索引值了？<br></br>如下代码片段：</p>\n\n<pre><code><span></span>\n<span> &lt;scroll-view bindscroll=\"chartScroll\" scroll-x scroll-left=\"{'{'}{'{'}moveScroll}}\" scroll-with-animation bindtouchstart='clickStart'&gt;</span>\n<span>...</span>\n<span>&lt;/scroll-view&gt;</span>\n<span></span>\n</code></pre>\n\n<p>bindscroll事件在组件滑动过程中执行，scroll-left设置/监听滑动轴记录左端的距离，scroll-with-animation 设置滑动过程展示动画，bindtouchstart绑定滑动初始状态。</p>\n\n<p>第一步，在onLoad生命周期，对图表视图进行渲染，获取实际渲染尺寸，对图表区添加适合的左右padding值，使得第一个和最后一个柱都能恰好卡在正中间。<br></br>第二步，滑动开始时，执行事件，设置isTouch为true，这里是防止伪触摸：</p>\n\n<pre><code><span></span>\n<span>// 滑动开始</span>\n<span>clickStart(e) {'{'}</span>\n<span>    this.setData({'{'}</span>\n<span>      isTouch: true</span>\n<span>    })</span>\n<span>},</span>\n<span></span>\n</code></pre>\n\n<p>第三步，滑动监听，涉及到节流函数的运用，当滑动停止的100ms以后执行结束事件：</p>\n\n<pre><code><span></span>\n<span>  chartScroll(e) {'{'}</span>\n<span>    // console.log(\"滑动\" + e.detail.scrollLeft)</span>\n<span>    let that = this</span>\n<span>    clearTimeout(this.data.scrollTimeout)</span>\n<span>    if (this.data.isTouch) {'{'}</span>\n<span>      this.setData({'{'}</span>\n<span>        scrollX: e.detail.scrollLeft</span>\n<span>      })</span>\n<span>      // 节流函数，当滑动停止的100毫秒后执行结束事件</span>\n<span>      // 因为ios下有惯性滑动，这里不能直接touchend事件</span>\n<span>      this.setData({'{'}</span>\n<span>        scrollTimeout: setTimeout(() =&gt; {'{'}</span>\n<span>          that.clickEnd()</span>\n<span>        }, 100)</span>\n<span>      })</span>\n<span>    }</span>\n<span>  },</span>\n<span>// 滑动结束，判断当前的索引值，再修正滑动轴的位移距离</span>\n<span>  clickEnd() {'{'}</span>\n<span>    console.log('滑动结束')</span>\n<span>    let nowIndex = Math.round(this.data.scrollX / this.data.barWidth + 1)</span>\n<span>    this.setData({'{'}</span>\n<span>      nowIndex: nowIndex,</span>\n<span>      moveScroll: this.data.barWidth * (nowIndex - 1),</span>\n<span>      isTouch: false</span>\n<span>    })</span>\n<span>  }</span>\n<span></span>\n</code></pre>\n\n<p>至此，大致的过程完毕，效果图如下：<br></br><img src=\"http://wx2.sinaimg.cn/mw690/a73bc6a1ly1frirt7juqeg20900fu4lh.gif\" alt=\"image\" title=\"\" /></p>\n\n<p>总结：小程序的图表机制到目前为止仍然很不理想，所。这几种里面没有涉及canvas的办法实现，最后使用的大量view标签实现在性能上肯定是不及canvas的方法，在ip5等性能差的手机上仍然存在卡顿的问题。所以对于小程序图表的实现，仍然需要大量的调研和方法实现。</p>\n\n<p>代码地址：https://github.com/252860883/wechat-slideBarChart</p>\n</div>\n            </Fragment>\n        )\n    }\n}"],"sourceRoot":""}