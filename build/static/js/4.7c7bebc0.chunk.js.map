{"version":3,"sources":["components/headerLink.tsx","article/JavaScript设计模式系列（一）开发者模式.js"],"names":["Main","clickPosBtn","idName","dom","document","getElementById","window","scrollTo","top","offsetTop","left","behavior","_this2","this","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","className","props","headerLink","map","item","index","level","key","onClick","title","React","Component","Template","_this","Object","_Users_honghuidu_homework_dinosaur_blog_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","_Users_honghuidu_homework_dinosaur_blog_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","_Users_honghuidu_homework_dinosaur_blog_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","call","state","react__WEBPACK_IMPORTED_MODULE_5__","_components_headerLink__WEBPACK_IMPORTED_MODULE_7__","id"],"mappings":"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","file":"static/js/4.7c7bebc0.chunk.js","sourcesContent":["import React from 'react'\nimport \"../style/components/headerLink.scss\"\nexport default class Main extends React.Component<any, any>{\n    componentDidMount() { }\n\n    clickPosBtn = (idName: string) => {\n        const dom: any = document.getElementById(idName);\n        window.scrollTo({\n            top: dom.offsetTop - 10,\n            left: 0,\n            behavior: 'smooth'\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"headerLink\">\n                <div className=\"content\">\n                    <div className=\"real-content\">\n                        <div className='tag'>Reading Assistance ·</div>\n                        {\n                            this.props.headerLink.map((item: any, index: number) => {\n                                return <span className={'a' + item.level} key={index} onClick={() => this.clickPosBtn(item.title)}>{item.title}</span>\n                            })\n                        }\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}","import React, { Fragment } from 'react'\nimport '../style/main.scss'\nimport HeaderLink from \"../components/headerLink\"\nexport default class Template extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            headerLink: [{\"level\":\"h3\",\"title\":\"概念\"},{\"level\":\"h3\",\"title\":\"实现\"},{\"level\":\"h3\",\"title\":\"发布订阅模式\"},{\"level\":\"h3\",\"title\":\"优点\"}]\n        }\n    }\n    componentWillMount(){\n    }\n    componentDidMount() {\n    }\n    render() {\n        return (\n            <Fragment>\n                <HeaderLink headerLink={this.state.headerLink}></HeaderLink>\n                <div className=\"article\">\n<div className=\"title-content\"><h1 className=\"title\">JavaScript设计模式（一）观察者模式</h1></div>\n<blockquote>\n  <p>观察者模式可谓是设计模式中非常经典的一个了，在众多的前端库中也能找到他的踪迹，比如JQ的on和trigger中封装的方法、VUE组件间实现通信的emit()和on()方法等等。自从某次面试被新浪dalao要求手写观察者模式代码被惨虐以后便决心好好研究一下这个东西！</p>\n</blockquote>\n\n<h3 id='概念'>概念</h3>\n\n<p>观察者模式是指一个对象（subject）维持一系列依赖于它的观察者对象（observer），将有关状态的变化同步通知给他们。</p>\n\n<h3 id='实现'>实现</h3>\n\n<p>那么具体实现开发者模式主要分三个步骤：<br></br> 1. 创建构造函数，函数内创建一个观察者缓存列表，用来存放所有的观察者对象<br></br> 2. 封装添加观察者方法，将观察者写入缓存列表<br></br> 3. 封装发布者方法，函数执行时，遍历缓存列表，执行对应观察者的操作<br></br> 4. new构造函数创建一个实例，执行后续操作</p>\n\n<p>上代码：<br></br> </p>\n\n<pre><code><span></span>\n<span>        // 创建构造函数</span>\n<span>        function Observer() {'{'}</span>\n<span>            //创建观察者数组</span>\n<span>            this.observerList = [];</span>\n<span>        }</span>\n<span>        Observer.prototype.on = function (obj) {'{'}</span>\n<span>            this.observerList.push(obj);</span>\n<span>        }</span>\n<span>        Observer.prototype.emit = function () {'{'}</span>\n<span>            // 遍历数组所有的观察者并执行操作</span>\n<span>            this.observerList.forEach(obj =&gt; {'{'}</span>\n<span>                obj.apply(this, arguments)</span>\n<span>            })</span>\n<span>        }</span>\n<span>        // 清除绑定，清楚某个绑定直接对数组进行增删操作，这里不一一列举</span>\n<span>        Observer.prototype.clean = function (obj) {'{'}</span>\n<span>            this.observerList = [];</span>\n<span>        }</span>\n<span></span>\n<span>        var ob = new Observer();</span>\n<span>        ob.on(function (name) {'{'}</span>\n<span>            console.log(\"你的名字是\" + name)</span>\n<span>        })</span>\n<span>        ob.on(function (year) {'{'}</span>\n<span>            console.log(\"你的年纪\" + year)</span>\n<span>        })</span>\n<span>        ob.emit('Dan')</span>\n<span>        ob.emit(6)</span>\n<span>        ob.clean()</span>\n<span>        ob.emit('Danny', 23)</span>\n<span></span>\n<span>        /** </span>\n<span>         * 输出：</span>\n<span>         * 你的名字是Dan</span>\n<span>         * 你的年纪Dan</span>\n<span>         * 你的名字是6</span>\n<span>         * 你的年纪6</span>\n<span>        */</span>\n<span></span>\n<span> </span>\n</code></pre>\n\n<p>这样一个简单的观察者模式就可以实现了，但是同时发现了一个问题 subject 和 observer是混淆的，并不会分开对应，所以下面就做进一步的升级，也就是我们常常提到的发布订阅模式了。</p>\n\n<h3 id='发布订阅模式'>发布订阅模式</h3>\n\n<p>发布订阅模式的不同之处是使用了一个主题/事件通道，这个通道是介于希望接收到通知的对象和激活事件对象之间，通俗讲可以通过传递一个特定的key指来实现。其目的是使发布者和订阅者之间产生依赖关系。<br></br>修改代码如下：</p>\n\n<pre><code><span></span>\n<span>        // 创建构造函数</span>\n<span>        function Observer2() {'{'}</span>\n<span>            //创建观察者数组</span>\n<span>            this.observerList = [];</span>\n<span>        }</span>\n<span>        Observer2.prototype.on = function (key, obj) {'{'}</span>\n<span>            if (!this.observerList[key]) {'{'}</span>\n<span>                this.observerList[key] = []</span>\n<span>            }</span>\n<span>            //将observerpush进对应的key内存中</span>\n<span>            this.observerList[key].push(obj);</span>\n<span>        }</span>\n<span>        Observer2.prototype.emit = function () {'{'}</span>\n<span>            //获取key值</span>\n<span>            var oKey = Array.prototype.shift.apply(arguments);</span>\n<span>            // 遍历数组所有的观察者并执行操作</span>\n<span>            this.observerList[oKey].forEach(obj =&gt; {'{'}</span>\n<span>                obj.apply(this, arguments)</span>\n<span>            })</span>\n<span>        }</span>\n<span></span>\n<span>        var ob2 = new Observer2();</span>\n<span></span>\n<span>        ob2.on('buy', function (shop) {'{'}</span>\n<span>            console.log(\"购买：\" + shop);</span>\n<span>        })</span>\n<span>        ob2.on('sale', function (shop) {'{'}</span>\n<span>            console.log('售卖：' + shop)</span>\n<span>        })</span>\n<span>        ob2.emit('buy', \"冰激凌\")</span>\n<span>        ob2.emit('sale', \"西瓜\")</span>\n<span></span>\n</code></pre>\n\n<h3 id='优点'>优点</h3>\n\n<ol>\n<li>异步编程</li>\n<li>利于代码的松散耦合</li>\n</ol>\n</div>\n            </Fragment>\n        )\n    }\n}"],"sourceRoot":""}