{"version":3,"sources":["components/headerLink.tsx","article/JavaScript的类型检测.js"],"names":["Main","clickPosBtn","idName","dom","document","getElementById","window","scrollTo","top","offsetTop","left","behavior","_this2","this","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","className","props","headerLink","map","item","index","level","key","onClick","title","React","Component","Template","_this","Object","_Users_honghuidu_homework_dinosaur_blog_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","_Users_honghuidu_homework_dinosaur_blog_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","_Users_honghuidu_homework_dinosaur_blog_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","call","state","react__WEBPACK_IMPORTED_MODULE_5__","_components_headerLink__WEBPACK_IMPORTED_MODULE_7__","id","target","href"],"mappings":"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","file":"static/js/2.223195de.chunk.js","sourcesContent":["import React from 'react'\nimport \"../style/components/headerLink.scss\"\nexport default class Main extends React.Component<any, any>{\n    componentDidMount() { }\n\n    clickPosBtn = (idName: string) => {\n        const dom: any = document.getElementById(idName);\n        window.scrollTo({\n            top: dom.offsetTop - 10,\n            left: 0,\n            behavior: 'smooth'\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"headerLink\">\n                <div className=\"content\">\n                    <div className=\"real-content\">\n                        <div className='tag'>Reading Assistance ·</div>\n                        {\n                            this.props.headerLink.map((item: any, index: number) => {\n                                return <span className={'a' + item.level} key={index} onClick={() => this.clickPosBtn(item.title)}>{item.title}</span>\n                            })\n                        }\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}","import React, { Fragment } from 'react'\nimport '../style/main.scss'\nimport HeaderLink from \"../components/headerLink\"\nexport default class Template extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            headerLink: [{\"level\":\"h3\",\"title\":\"类型\"},{\"level\":\"h3\",\"title\":\"typeof\"},{\"level\":\"h3\",\"title\":\"instanceof\"},{\"level\":\"h3\",\"title\":\"isPrototypeOf()\"},{\"level\":\"h3\",\"title\":\"===\"},{\"level\":\"h3\",\"title\":\"constructor\"},{\"level\":\"h3\",\"title\":\"Object.prototype.toString.call()\"},{\"level\":\"h3\",\"title\":\"总结\"}]\n        }\n    }\n    componentWillMount(){\n    }\n    componentDidMount() {\n    }\n    render() {\n        return (\n            <Fragment>\n                <HeaderLink headerLink={this.state.headerLink}></HeaderLink>\n                <div className=\"article\">\n<div className=\"title-content\"><h1 className=\"title\">JavaScript的类型检测</h1></div>\n<blockquote>\n  <p>大家都知道 JavaScript 是一个弱类型语言，所以平时对类型的判断是一个很重要的事情。当然也有很多方法可以用来区分类型：typeof、instanceof、=== 等等，那我们需要在什么场景下该用哪个方法来区分呢？</p>\n</blockquote>\n\n<h3 id='类型'>类型</h3>\n\n<p>复习一下 JavaScript 的数据类型，基本数据类型：<code>Number</code>、<code>String</code>、<code>Null</code>、<code>Undefined</code>、<code>Boolean</code>、<code>Symbol</code>。引用数据类型：<code>Object</code>、<code>Array</code>、<code>Function</code>、<code>Date</code>等。关于两者的区别这里不再做介绍，可以翻看我之前的另一篇文章：<a target=\"_blank\" href=\"https://252860883.github.io/2018/06/12/%E5%89%96%E6%9E%90JavaScript%E7%9A%84%E5%86%85%E5%AD%98%E6%9C%BA%E5%88%B6/\">剖析JavaScript的内存机制</a></p>\n\n<h3 id='typeof'>typeof</h3>\n\n<blockquote>\n  <p>typeof 返回一个表示数据类型的字符串。这里需要注意：它不能判断 null、array、date、RegExp等类型。</p>\n</blockquote>\n\n<pre><code><span></span>\n<span>** 以下情况可以进行判断 **</span>\n<span></span>\n<span>typeof Symbol(); // symbol </span>\n<span>typeof ''; // string </span>\n<span>typeof 1; // number </span>\n<span>typeof true; //boolean </span>\n<span>typeof undefined; //undefined </span>\n<span>typeof new Function(); // function </span>\n<span>typeof {'{'}}; // object</span>\n<span></span>\n<span>** 以下情况无法进行判断 **</span>\n<span></span>\n<span>typeof null; //object </span>\n<span>typeof [1,2,3] ; //object </span>\n<span>typeof new Date(); //object </span>\n<span>typeof new RegExp(); //object </span>\n<span></span>\n<span></span>\n</code></pre>\n\n<h3 id='instanceof'>instanceof</h3>\n\n<blockquote>\n  <p>A instanceof B 是判断 A 是否为 B 的实例，即判断 A的原型链中是否存在构造函数B。所以我们可以通过这个方法来判断 array、date、RegExp等。</p>\n</blockquote>\n\n<pre><code><span></span>\n<span>[1,2,3] instanceof Array; //true</span>\n<span>{'{'}} instanceof Object;//true</span>\n<span>new Date() instanceof Date;//true</span>\n<span>new RegExp() instanceof RegExp//true</span>\n<span></span>\n</code></pre>\n\n<p>同时，检测 Array 类型也可以使用 ES6 的新语法  <code>Array.isArray()</code> 来进行检测。</p>\n\n<p>正如上面所说，只要 A的原型链中存在构造函数B即返回 true 所以可能有多个构造函数B满足：</p>\n\n<pre><code><span></span>\n<span>[1,2,3] instanceof Array; // true</span>\n<span>[1,2,3] instanceof Object; // true</span>\n<span></span>\n</code></pre>\n\n<p>模拟实现一个 <code>instanceof</code> 方法：</p>\n\n<pre><code><span></span>\n<span>function instanceOf(A, B) {'{'}</span>\n<span>    while (true) {'{'}</span>\n<span>        // 原型链到头仍未找到返回false</span>\n<span>        if(A === null){'{'}</span>\n<span>            return false</span>\n<span>        }</span>\n<span>        if (A === B.prototype) {'{'}</span>\n<span>            console.log(A,B)</span>\n<span>            return true</span>\n<span>        }</span>\n<span>        A = A.__proto__</span>\n<span>    }</span>\n<span>}</span>\n<span></span>\n</code></pre>\n\n<p>但是需要注意，对于基本数据类型来说，我们需要通过<strong>创建实例</strong>方法才能被 instanceof 检测出来。原因是：通过字面量方式创建的基本数据类型不是一个严谨的实例，只有通过实例创建出的对象才是标准的对象数据类型值。而由于 JS 的松散性，可以按照正常基本类型对象处理。</p>\n\n<pre><code><span></span>\n<span>1 instanceof Number; // false</span>\n<span>new Number(1) instanceof Number; // false</span>\n<span></span>\n<span>\"abc\" instanceof String; // false </span>\n<span>new String('abc') instanceof String; // true</span>\n<span></span>\n<span></span>\n</code></pre>\n\n<p>对于检测 Null 和 Undefined 类型，instanceof 又鸡肋了！因为浏览器不允许在外部访问 Null 和 Undefined 类，所以会出现以下报错：</p>\n\n<pre><code><span></span>\n<span>null instanceof Null; // Null is not defined</span>\n<span>undefined instanceof Undefined; // Undefined is not defined</span>\n<span></span>\n</code></pre>\n\n<h3 id='isPrototypeOf()'>isPrototypeOf()</h3>\n\n<blockquote>\n  <p>方法用于测试一个对象是否存在于另一个对象的原型链上,它和 instanceof 有着异曲同工的作用：</p>\n</blockquote>\n\n<pre><code><span></span>\n<span>RegExp.prototype.isPrototypeOf(/\\n/)    // true</span>\n<span>String.prototype.isPrototypeOf(new String('1234'))  // true</span>\n<span>String.prototype.isPrototypeOf('1234')  // true</span>\n<span></span>\n</code></pre>\n\n<h3 id='==='>===</h3>\n\n<blockquote>\n  <p>严格等于就好说啦，他只能用来判断 null 和 undefined 类型，因为这两个类型的值都是唯一的。</p>\n</blockquote>\n\n<pre><code><span></span>\n<span>var a = null;</span>\n<span>a === null; // true </span>\n<span></span>\n<span>var b = undefined;</span>\n<span>b ==== undefined; // true</span>\n<span></span>\n</code></pre>\n\n<h3 id='constructor'>constructor</h3>\n\n<blockquote>\n  <p>constructor 和 instanceof 的作用很像，区别在于它可以处理基本数据类型，并且在检测 Object 时处理不一样。</p>\n</blockquote>\n\n<pre><code><span></span>\n<span>** constructor只能判断是否由该构造函数创建的实例，不能判断原型链上的 **</span>\n<span>[1,2,3].constructor == Array; // true </span>\n<span>[1,2,3].constructor == Object; // false</span>\n<span></span>\n<span>** 可以用来判断基础类型 null/undefined 除外 **</span>\n<span>var a=\"aaa\";</span>\n<span>a.constructor == String; // true</span>\n<span>var b=1;</span>\n<span>b.constructor == Number; // true</span>\n<span></span>\n<span></span>\n</code></pre>\n\n<p>当然 constructor 还是同样不能判断 <code>null</code> 和 <code>undefined</code>，同时如果对类的原型进行重写时很有可能把 constructor给覆盖，所以还是要慎用哦！</p>\n\n<h3 id='Object.prototype.toString.call()'>Object.prototype.toString.call()</h3>\n\n<blockquote>\n  <p>嗯，最后出场的一定是大佬级了，这是最准确也是最常用的方法了。</p>\n</blockquote>\n\n<p>我们平时都知道 <code>to String()</code> 是转换为字符串，但是对于Object上的 toString 并不是用来转换字符串，它的作用是返回当前方法执行的主体（方法中的 this）所属类的详细信息即\"[object Object]\",其中第一个 object 代表当前实例是对象数据类型的(这个是固定死的)，第二个 Object 代表的是 this 所属的类是 Object。</p>\n\n<pre><code><span></span>\n<span>Object.prototype.toString.call('') ;   // [object String]</span>\n<span>Object.prototype.toString.call(1) ;    // [object Number]</span>\n<span>Object.prototype.toString.call(true) ; // [object Boolean]</span>\n<span>Object.prototype.toString.call(undefined) ; // [object Undefined]</span>\n<span>Object.prototype.toString.call(null) ; // [object Null]</span>\n<span>Object.prototype.toString.call(new Function()) ; // [object Function]</span>\n<span>Object.prototype.toString.call(new Date()) ; // [object Date]</span>\n<span>Object.prototype.toString.call([]) ; // [object Array]</span>\n<span>Object.prototype.toString.call(new RegExp()) ; // [object RegExp]</span>\n<span>Object.prototype.toString.call(new Error()) ; // [object Error]</span>\n<span>Object.prototype.toString.call(document) ; // [object HTMLDocument]</span>\n<span>Object.prototype.toString.call(window) ; //[object global] window是全局对象global的引用</span>\n<span>Object.prototype.toString.call({'{'}}) ; // [object Object]</span>\n<span></span>\n</code></pre>\n\n<h3 id='总结'>总结</h3>\n\n<table><tbody><tr><th> 方法 </th><th> 可判断类型 </th><th> 缺点 </th></tr><tr><td> typeof </td><td> 基本数据类型（null除外）、Object </td><td> 不能判断 null、array、date、RegExp等类型 </td></tr><tr><td> instanceof </td><td>  Array、Date、RegExp等类型 </td><td> 1.只要是在实例上的构造函数就会判断为真 2.基本数据类型必须通过实例创建方式才能被检测 3.不能检测 null 和 undefined </td></tr><tr><td> === </td><td> Null 和 Undefined</td><td> 只能检测 null 和 undefined</td></tr><tr><td> constructor</td><td> 基本数据类型、Array、Date、RegExp等</td><td> 1.不能判断 null 和 undefined 2.如果对类的原型进行重写时很有可能把 constructor给覆盖</td></tr><tr><td>Object.prototype.toString.call()</td><td>全都可以</td><td>如果非要找缺点，那就是需要多打几个字母？</td></tr></tbody></table>\n</div>\n            </Fragment>\n        )\n    }\n}"],"sourceRoot":""}