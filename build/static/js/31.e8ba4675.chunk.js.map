{"version":3,"sources":["components/headerLink.tsx","article/如何实现一个sleep函数.js"],"names":["Main","clickPosBtn","idName","dom","document","getElementById","window","scrollTo","top","offsetTop","left","behavior","_this2","this","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","className","props","headerLink","map","item","index","level","key","onClick","title","React","Component","Template","_this","Object","_Users_honghuidu_homework_dinosaur_blog_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","_Users_honghuidu_homework_dinosaur_blog_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","_Users_honghuidu_homework_dinosaur_blog_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","call","state","react__WEBPACK_IMPORTED_MODULE_5__","_components_headerLink__WEBPACK_IMPORTED_MODULE_7__","id","target","href"],"mappings":"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","file":"static/js/31.e8ba4675.chunk.js","sourcesContent":["import React from 'react'\nimport \"../style/components/headerLink.scss\"\nexport default class Main extends React.Component<any, any>{\n    componentDidMount() { }\n\n    clickPosBtn = (idName: string) => {\n        const dom: any = document.getElementById(idName);\n        window.scrollTo({\n            top: dom.offsetTop - 10,\n            left: 0,\n            behavior: 'smooth'\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"headerLink\">\n                <div className=\"content\">\n                    <div className=\"real-content\">\n                        <div className='tag'>Reading Assistance ·</div>\n                        {\n                            this.props.headerLink.map((item: any, index: number) => {\n                                return <span className={'a' + item.level} key={index} onClick={() => this.clickPosBtn(item.title)}>{item.title}</span>\n                            })\n                        }\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}","import React, { Fragment } from 'react'\nimport '../style/main.scss'\nimport HeaderLink from \"../components/headerLink\"\nexport default class Template extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            headerLink: [{\"level\":\"h3\",\"title\":\"方法一：利用死循环阻塞线程\"},{\"level\":\"h3\",\"title\":\"方法二：Async/Await\"},{\"level\":\"h3\",\"title\":\"方法三：Generator\"},{\"level\":\"h3\",\"title\":\"最后\"},{\"level\":\"h3\",\"title\":\"参考\"}]\n        }\n    }\n    componentWillMount(){\n    }\n    componentDidMount() {\n    }\n    render() {\n        return (\n            <Fragment>\n                <HeaderLink headerLink={this.state.headerLink}></HeaderLink>\n                <div className=\"article\">\n<div className=\"title-content\"><h1 className=\"title\">如何用js实现一个sleep函数</h1></div>\n<blockquote>\n  <p>Sleep函数可以使计算机程序（进程，任务或线程）进入休眠，使其在一段时间内处于非活动状态。当函数设定的计时器到期，或者接收到信号、程序发生中断都会导致程序继续执行。</p>\n</blockquote>\n\n<p>一些语言中都实现了sleep函数，比如java中<code>Thread.sleep</code>，shell脚本中的<code>sleep命令</code>等等，但是对于JavaScript，本身并没有提供 sleep() 方法，在执行js脚本时没有直接的让线程进入休眠暂停的功能，或许我们常见的处理是把2s以后要执行的代码放到 setTimeout 中进行异步处理，但是像 sleep() 函数这样在同步的代码里去执行休眠操作的功能，有没有办法模拟实现一下呢？</p>\n\n<h3 id='方法一：利用死循环阻塞线程'>方法一：利用死循环阻塞线程</h3>\n\n<p>在 timeout 时间内疯狂的执行死循环来阻塞线程，虽然后续的代码不继续执行了，但是这并不是意味着线程进入休眠，反倒CPU会飙升，这种暴力实现还是不要轻易尝试，当然更不能放到业务中去使用：</p>\n\n<pre><code><span></span>\n<span>function sleep(timeout) {'{'}</span>\n<span>    let startTime = new Date().getTime()</span>\n<span>    while (new Date().getTime() - startTime &lt;= timeout) {'{'}</span>\n<span>        // 这里进入死循环，阻塞线程</span>\n<span>        // 当 timeout 以后 释放线程，执行后续代码</span>\n<span>    }</span>\n<span>}</span>\n<span></span>\n</code></pre>\n\n<h3 id='方法二：Async/Await'>方法二：Async/Await</h3>\n\n<p>实现这个sleep函数其实就可以变相的理解为如何把一个异步任务变成同步任务执行。那显然就可以用 ES6 的 Async/Await，实现起来也很简单，sleep函数内返回一个promise对象，当timeout时间后变成fulfilled状态，sleep函数执行结束，继续执行后续代码：</p>\n\n<pre><code><span></span>\n<span>function sleep(timeout) {'{'}</span>\n<span>    return new Promise(resolve =&gt; {'{'}</span>\n<span>        setTimeout(resolve, timeout)</span>\n<span>    })</span>\n<span>}</span>\n<span></span>\n<span>(async function () {'{'}</span>\n<span>    await sleep(1000)   </span>\n<span>    // 'run after 1000ms'</span>\n<span>})()</span>\n<span></span>\n</code></pre>\n\n<h3 id='方法三：Generator'>方法三：Generator</h3>\n\n<h3 id='最后'>最后</h3>\n\n<p>给 JavaScript 硬安一个 sleep() 函数着实有些“死马当活马医”的意思，JavaScript是单线程执行的脚本语言，我们在代码里面直接 sleep 让线程休眠是不是太自私了点？毕竟人家就这么一条道好多“人”都等着走呢！所以js的异步机制就很棒了，我们要等待的代码先放到队列里等着，别的不需要等待的操作呢就继续执行，多好，一派和谐！</p>\n\n<pre><code><span></span>\n<span>function sleep (timeout) {'{'}</span>\n<span>  return new Promise(resolve =&gt; {'{'}</span>\n<span>      setTimeout(resolve, timeout)</span>\n<span>  });</span>\n<span>}</span>\n<span></span>\n<span>sleep(5000).then(() =&gt; {'{'}</span>\n<span>    // run after 5000ms</span>\n<span>})</span>\n<span></span>\n</code></pre>\n\n<p>所以不用纠结如何实现 sleep() 函数，选择合适的编码方式最重要了 ：）</p>\n\n<h3 id='参考'>参考</h3>\n\n<p><a target=\"_blank\" href=\"https://www.cnblogs.com/mfryf/p/3142681.html\">js中实现sleep函数</a><br></br><a target=\"_blank\" href=\"https://juejin.im/post/5cc7ddaf6fb9a032106bda07\">简短优雅地利用js实现 sleep 函数</a></p>\n</div>\n            </Fragment>\n        )\n    }\n}"],"sourceRoot":""}